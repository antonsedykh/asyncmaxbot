{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":""},{"location":"#asyncmaxbot-sdk","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 AsyncMaxBot SDK!","text":"<p>\u042d\u0442\u043e \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e AsyncMaxBot, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 Python-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432 \u0432 Max Messenger.</p> <p>\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0432\u0441\u0451 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u043e\u0442\u043e\u0432 \u043b\u044e\u0431\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438: \u043e\u0442 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u044d\u0445\u043e-\u0431\u043e\u0442\u043e\u0432 \u0434\u043e \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0441 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439, inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 \u0438 callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439.</p>"},{"location":"#_1","title":"\ud83d\ude80 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u0412\u043e\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 <code>/start</code> \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u043b\u044e\u0431\u043e\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0431\u043e\u0447\u0438\u0439.</p> <pre><code>import asyncio\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\n\n# \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\nTOKEN = \"YOUR_TOKEN_HERE\"\n\nasync def main():\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c 'async with' \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0435\u0439\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b /start \u0441 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439\n        @dp.message_handler(F.command == \"start\")\n        async def handle_start(ctx: Context):\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [InlineKeyboardButton(text=\"\ud83c\udfae \u0418\u0433\u0440\u0430\u0442\u044c\", payload=\"play\")],\n                    [InlineKeyboardButton(text=\"\u2139\ufe0f \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")]\n                ]\n            )\n            await ctx.reply(f\"\u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\", reply_markup=keyboard)\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a callback \u043a\u043d\u043e\u043f\u043e\u043a\n        @dp.callback_query_handler(F.payload == \"play\")\n        async def handle_play_callback(ctx: Context):\n            await ctx.answer_callback(\"\ud83c\udfae \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u0433\u0440\u0443!\")\n            await ctx.edit_message(\"\u0418\u0433\u0440\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c! \ud83c\udfb2\")\n\n        @dp.callback_query_handler(F.payload == \"help\")\n        async def handle_help_callback(ctx: Context):\n            await ctx.answer_callback(\"\u2139\ufe0f \u0421\u043f\u0440\u0430\u0432\u043a\u0430\")\n            await ctx.edit_message(\"\u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0431\u043e\u0442 \u0441 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439!\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n        @dp.message_handler()\n        async def handle_echo(ctx: Context):\n            if ctx.text:\n                await ctx.reply(f\"\u0412\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438: {ctx.text}\")\n\n        # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439\n        print(\"\u0411\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d...\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    try:\n        asyncio.run(main())\n    except KeyboardInterrupt:\n        print(\"\u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d.\")\n</code></pre>"},{"location":"#_2","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c:","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: <code>pip install asyncmaxbot</code></li> <li>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u043a\u043e\u0434 \u0432 \u0444\u0430\u0439\u043b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>my_bot.py</code>.</li> <li>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>\"YOUR_TOKEN_HERE\"</code> \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u043e\u0442\u0430.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e: <code>python my_bot.py</code></li> </ol>"},{"location":"#_3","title":"\u2728 \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"#magicfilter-f","title":"\ud83c\udfaf MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (F)","text":"<p>\u0413\u0438\u0431\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439: <pre><code>@dp.message_handler(F.text.contains(\"\u043f\u0440\u0438\u0432\u0435\u0442\") &amp; F.user_id == 123)\n@dp.message_handler(F.command == \"start\" | F.text.startswith(\"help\"))\n@dp.message_handler(F.has_attachments == True)\n</code></pre></p>"},{"location":"#inline-callback","title":"\ud83c\udfae Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 callback","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043d\u043e\u043f\u043e\u043a \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0430\u0436\u0430\u0442\u0438\u0439: <pre><code>keyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [InlineKeyboardButton(text=\"\u041a\u043d\u043e\u043f\u043a\u0430\", payload=\"action\")]\n    ]\n)\n\n@dp.callback_query_handler(F.payload == \"action\")\nasync def handle_callback(ctx: Context):\n    await ctx.answer_callback(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e!\")\n</code></pre></p>"},{"location":"#_4","title":"\ud83d\udcce \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438","text":"<p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0444\u0430\u0439\u043b\u043e\u0432: \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0432\u0438\u0434\u0435\u043e, \u0430\u0443\u0434\u0438\u043e, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b: <pre><code>@dp.message_handler(F.attachment.type == \"image\")\nasync def handle_photo(ctx: Context):\n    for attachment in ctx.attachments:\n        await ctx.reply(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435: {attachment.filename}\")\n</code></pre></p>"},{"location":"#middleware","title":"\ud83d\udd27 Middleware \u0441\u0438\u0441\u0442\u0435\u043c\u0430","text":"<p>\u0421\u043a\u0432\u043e\u0437\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439: <pre><code>from maxbot.middleware import LoggingMiddleware, ThrottlingMiddleware\n\ndp.include_middleware(LoggingMiddleware())\ndp.include_middleware(ThrottlingMiddleware(rate_limit=1.0))\n</code></pre></p>"},{"location":"#_5","title":"\ud83c\udfb2 \u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<p>\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0433\u0440 (\u0431\u043b\u044d\u043a\u0434\u0436\u0435\u043a, \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c) \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c.</p>"},{"location":"#_6","title":"\ud83d\udcda \u041a\u0443\u0434\u0430 \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435?","text":"<ul> <li>\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API: \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0441\u044e\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0433\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 SDK.</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430: \u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \"\u0436\u0438\u0432\u044b\u043c\u0438\" \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043a\u043e\u0434\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0433\u0440\u044b \u0438 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438.</li> <li>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 PyPI: \u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u0445.</li> </ul>"},{"location":"#1310","title":"\ud83d\udd04 \u0412\u0435\u0440\u0441\u0438\u044f 1.3.10","text":"<p>\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442: - \u2705 MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0433\u0438\u0431\u043a\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 - \u2705 Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 - \u2705 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 - \u2705 Middleware \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 - \u2705 \u041f\u043e\u043b\u043d\u0443\u044e \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e \u0441 Pydantic - \u2705 \u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438 \u0442\u0435\u0441\u0442\u044b</p>"},{"location":"api/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u2014 \u0432\u0430\u0448 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c, \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u0438 \u0442\u0438\u043f\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445 AsyncMaxBot SDK, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u0434\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 1.3.10.</p>"},{"location":"api/#1","title":"1. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0438 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><pre><code>graph TD\n    A[\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435] --&gt; B[Max API];\n    B --&gt; C{bot.polling};\n    C --\"JSON-\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\"--&gt; D[Dispatcher];\n    D --\"\u041f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432 MiddlewareManager\"--&gt; E[MiddlewareManager];\n    E --\"\u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442 Middleware\"--&gt; F[\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432 Pydantic-\u043c\u043e\u0434\u0435\u043b\u0438];\n    F --\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 Context\"--&gt; G[Context];\n    G --\"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u044b\"--&gt; H{\u0424\u0438\u043b\u044c\u0442\u0440\u044b: F, command, text, ...};\n    H --\"\u0414\u0410\"--&gt; I[\u0412\u044b\u0437\u043e\u0432 \u0432\u0430\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430];\n    I --\"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Context \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430\"--&gt; J{ctx.reply()};\n    J --\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 Bot\"--&gt; K[Bot.send_message];\n    K --\"HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\"--&gt; B;\n    B --&gt; L[\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442];\n    H --\"\u041d\u0415\u0422\"--&gt; M[\u041f\u043e\u0438\u0441\u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430];\n</code></pre> 1.  \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>bot.polling(dispatcher=dp)</code> \u0431\u043e\u0442 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 Max API \u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. 2.  <code>Dispatcher</code> \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 <code>MiddlewareManager</code>. 3.  Middleware \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435. 4.  \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0441\u044f\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u0433\u043e \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 Pydantic-\u043c\u043e\u0434\u0435\u043b\u0438 (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b \"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445\"). 5.  \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Context</code>. 6.  <code>Dispatcher</code> \u0438\u0449\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0435\u0433\u043e <code>\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c</code>. 7.  \u0415\u0441\u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u044b, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0430\u0448\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 <code>Context</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430.</p>"},{"location":"api/#2-bot","title":"2. \u041a\u043b\u0430\u0441\u0441 <code>Bot</code>","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Max API. \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440.</p> <p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u043a: <pre><code>async with Bot(token=TOKEN) as bot:\n    dp = Dispatcher(bot)\n    # ... \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 ...\n    await bot.polling(dispatcher=dp)\n</code></pre></p>"},{"location":"api/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","text":"<ul> <li><code>polling(dispatcher, ...)</code>: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430.</li> <li><code>get_me()</code> -&gt; <code>dict</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u0442\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f.</li> <li><code>send_message(chat_id, text, reply_markup=None, ...)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440.</li> <li><code>edit_message(message_id, text, reply_markup=None, ...)</code>: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>delete_message(message_id)</code>: \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>send_photo(chat_id, photo, ...)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u043e\u0442\u043e. \u0412 <code>photo</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443, <code>io.BytesIO</code> \u0438\u043b\u0438 ID \u0444\u0430\u0439\u043b\u0430.</li> <li><code>send_document(chat_id, document, filename=None, ...)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442.</li> <li><code>get_chat_members(chat_id)</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0430\u0442\u0430.</li> <li><code>send_action(chat_id, action)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0447\u0430\u0442 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>typing</code>).</li> <li><code>answer_callback_query(callback_id, text=None, show_alert=False, ...)</code>: \u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 callback-\u0437\u0430\u043f\u0440\u043e\u0441.</li> </ul>"},{"location":"api/#3-dispatcher","title":"3. \u041a\u043b\u0430\u0441\u0441 <code>Dispatcher</code>","text":"<p>\u0414\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 middleware \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0443\u0436\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438.</p> <p><pre><code>from maxbot import Dispatcher\n\ndp = Dispatcher(bot)\n</code></pre> - <code>@dp.message_handler(*filters)</code>: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. - <code>@dp.callback_query_handler(*filters)</code>: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 callback-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. - <code>dp.include_middleware(middleware)</code>: \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 middleware \u0432 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p>"},{"location":"api/#4-magicfilter-f","title":"4. MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (F)","text":"<p>MagicFilter \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432 \u0441\u0442\u0438\u043b\u0435, \u043f\u043e\u0445\u043e\u0436\u0435\u043c \u043d\u0430 SQL \u0438\u043b\u0438 ORM.</p>"},{"location":"api/#_2","title":"\u0418\u043c\u043f\u043e\u0440\u0442","text":"<pre><code>from maxbot import F\n</code></pre>"},{"location":"api/#_3","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"api/#_4","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f","text":"<pre><code>@dp.message_handler(F.text == \"\u043f\u0440\u0438\u0432\u0435\u0442\")\n@dp.message_handler(F.user_id == 123)\n@dp.message_handler(F.chat_id != 456)\n@dp.message_handler(F.user_id &gt; 100)\n@dp.message_handler(F.user_id &lt;= 1000)\n</code></pre>"},{"location":"api/#_5","title":"\u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438","text":"<pre><code>@dp.message_handler(F.text.contains(\"hello\"))\n@dp.message_handler(F.text.startswith(\"/\"))\n@dp.message_handler(F.text.endswith(\"!\"))\n</code></pre>"},{"location":"api/#_6","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439","text":"<pre><code>@dp.message_handler(F.user_id.in_([1, 2, 3, 4, 5]))\n@dp.message_handler(F.command.in_([\"start\", \"help\", \"info\"]))\n</code></pre>"},{"location":"api/#_7","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438","text":"<pre><code>@dp.message_handler(F.has_attachments == True)\n@dp.message_handler(F.attachment.type == \"image\")\n@dp.message_handler(F.attachment.type.in_([\"image\", \"video\"]))\n</code></pre>"},{"location":"api/#_8","title":"\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432","text":"<pre><code># AND \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\n@dp.message_handler(F.text.contains(\"admin\") &amp; F.user_id == 123)\n\n# OR \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f  \n@dp.message_handler(F.command == \"start\" | F.text.startswith(\"help\"))\n\n# NOT \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\n@dp.message_handler(~F.text.startswith(\"/\"))\n\n# \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n@dp.message_handler(\n    (F.command == \"start\" | F.text.contains(\"\u043f\u0440\u0438\u0432\u0435\u0442\")) &amp; \n    F.user_id.in_([1, 2, 3])\n)\n</code></pre>"},{"location":"api/#_9","title":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":"<ul> <li><code>F.text</code> - \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li><code>F.command</code> - \u043a\u043e\u043c\u0430\u043d\u0434\u0430 (\u0431\u0435\u0437 /)</li> <li><code>F.user</code> - \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>F.user_id</code> - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>F.chat</code> - \u043e\u0431\u044a\u0435\u043a\u0442 \u0447\u0430\u0442\u0430</li> <li><code>F.chat_id</code> - ID \u0447\u0430\u0442\u0430</li> <li><code>F.message_id</code> - ID \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li><code>F.attachment</code> - \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li><code>F.has_attachments</code> - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439</li> <li><code>F.payload</code> - payload callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f callback)</li> </ul>"},{"location":"api/#5-inline-callback","title":"5. Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 Callback","text":""},{"location":"api/#_10","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440","text":"<pre><code>from maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\n\n# \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\nkeyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [InlineKeyboardButton(text=\"\u041a\u043d\u043e\u043f\u043a\u0430 1\", payload=\"action1\")],\n        [InlineKeyboardButton(text=\"\u041a\u043d\u043e\u043f\u043a\u0430 2\", payload=\"action2\")]\n    ]\n)\n\n# \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0441 URL\nkeyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [InlineKeyboardButton(text=\"\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0441\u0430\u0439\u0442\", url=\"https://example.com\")],\n        [InlineKeyboardButton(text=\"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435\", payload=\"action\")]\n    ]\n)\n\n# \u041c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\nkeyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [\n            InlineKeyboardButton(text=\"\u2b05\ufe0f\", payload=\"prev\"),\n            InlineKeyboardButton(text=\"\u27a1\ufe0f\", payload=\"next\")\n        ],\n        [InlineKeyboardButton(text=\"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\", payload=\"menu\")]\n    ]\n)\n</code></pre>"},{"location":"api/#_11","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439","text":"<pre><code>@dp.message_handler(F.command == \"menu\")\nasync def show_menu(ctx: Context):\n    keyboard = InlineKeyboardMarkup(\n        inline_keyboard=[\n            [InlineKeyboardButton(text=\"\ud83c\udfae \u0418\u0433\u0440\u0430\u0442\u044c\", payload=\"play\")],\n            [InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"stats\")],\n            [InlineKeyboardButton(text=\"\u2139\ufe0f \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")]\n        ]\n    )\n    await ctx.reply(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\", reply_markup=keyboard)\n</code></pre>"},{"location":"api/#callback","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 callback","text":"<pre><code>@dp.callback_query_handler(F.payload == \"play\")\nasync def handle_play(ctx: Context):\n    # \u041e\u0442\u0432\u0435\u0447\u0430\u0435\u043c \u043d\u0430 callback (\u0443\u0431\u0438\u0440\u0430\u0435\u043c \"\u0447\u0430\u0441\u0438\u043a\u0438\")\n    await ctx.answer_callback(\"\ud83c\udfae \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u0433\u0440\u0443!\")\n\n    # \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    await ctx.edit_message(\"\u0418\u0433\u0440\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c! \ud83c\udfb2\")\n\n@dp.callback_query_handler(F.payload == \"stats\")\nasync def handle_stats(ctx: Context):\n    await ctx.answer_callback(\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f...\")\n    await ctx.edit_message(\"\u0412\u0430\u0448\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430: 10 \u0438\u0433\u0440, 7 \u043f\u043e\u0431\u0435\u0434\")\n\n@dp.callback_query_handler(F.payload == \"help\")\nasync def handle_help(ctx: Context):\n    # \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c alert\n    await ctx.answer_callback(\"\u042d\u0442\u043e \u0441\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u0438\u0433\u0440\u0435!\", show_alert=True)\n</code></pre>"},{"location":"api/#context-callback","title":"\u041c\u0435\u0442\u043e\u0434\u044b Context \u0434\u043b\u044f callback","text":"<ul> <li><code>ctx.answer_callback(text=None, show_alert=False)</code>: \u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 callback</li> <li><code>ctx.edit_message(text, reply_markup=None)</code>: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>ctx.payload</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 payload \u043a\u043d\u043e\u043f\u043a\u0438</li> <li><code>ctx.callback_id</code>: ID callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430</li> </ul>"},{"location":"api/#6-middleware","title":"6. Middleware","text":"<p>Middleware \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u043a\u0432\u043e\u0437\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>from maxbot.middleware import LoggingMiddleware, ThrottlingMiddleware, ErrorHandlingMiddleware\n\ndp.include_middleware(LoggingMiddleware())\ndp.include_middleware(ThrottlingMiddleware(rate_limit=1.0)) # 1 \u0441\u043e\u043e\u0431\u0449./\u0441\u0435\u043a\ndp.include_middleware(ErrorHandlingMiddleware())\n</code></pre></p>"},{"location":"api/#middleware","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 Middleware","text":"<ul> <li><code>LoggingMiddleware</code>: \u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445.</li> <li><code>ErrorHandlingMiddleware</code>: \u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445, \u0447\u0442\u043e\u0431\u044b \u0431\u043e\u0442 \u043d\u0435 \u043f\u0430\u0434\u0430\u043b.</li> <li><code>ThrottlingMiddleware</code>: \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li><code>AntispamMiddleware</code>: \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a.</li> <li><code>MetricsMiddleware</code>: \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 (\u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b, \u043a\u043e\u043b-\u0432\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439/\u043e\u0448\u0438\u0431\u043e\u043a).</li> <li><code>UserTrackingMiddleware</code>: \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</li> <li><code>ValidationMiddleware</code>: \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</li> <li><code>ProfilingMiddleware</code>: \u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</li> </ul>"},{"location":"api/#middleware_1","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e Middleware","text":"<pre><code>from maxbot.middleware import BaseMiddleware\n\nclass CustomMiddleware(BaseMiddleware):\n    async def __call__(self, handler, ctx):\n        # \u041b\u043e\u0433\u0438\u043a\u0430 \u0434\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n        print(f\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {ctx.user_id}\")\n\n        result = await handler(ctx)\n\n        # \u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n        print(f\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e\")\n\n        return result\n</code></pre>"},{"location":"api/#7-context","title":"7. \u041a\u043b\u0430\u0441\u0441 <code>Context</code>","text":"<p>\u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430.</p> <p>\u0418\u043c\u043f\u043e\u0440\u0442: <pre><code>from maxbot import Context\n</code></pre></p>"},{"location":"api/#_12","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":"<ul> <li><code>user</code>: \u041e\u0431\u044a\u0435\u043a\u0442 <code>User</code>. \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u043a\u0430\u043a <code>ctx.user.name</code>.</li> <li><code>chat</code>: \u041e\u0431\u044a\u0435\u043a\u0442 <code>Chat</code>.</li> <li><code>message</code>: \u041e\u0431\u044a\u0435\u043a\u0442 <code>Message</code>.</li> <li><code>text</code>: \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (<code>str | None</code>).</li> <li><code>attachments</code>: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 (<code>list[BaseAttachment] | None</code>).</li> <li><code>has_attachments</code>: <code>True</code>, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044c \u043e\u0434\u043d\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</li> <li><code>user_id</code>, <code>chat_id</code>: ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0447\u0430\u0442\u0430.</li> <li><code>message_id</code>: ID \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</li> <li><code>is_callback</code>: <code>True</code>, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e callback-\u0437\u0430\u043f\u0440\u043e\u0441.</li> <li><code>payload</code>: Payload callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f callback).</li> <li><code>callback_id</code>: ID callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f callback).</li> </ul>"},{"location":"api/#_13","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","text":"<ul> <li><code>reply(text, reply_markup=None, ...)</code>: \u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u0432 \u0442\u043e\u0442 \u0436\u0435 \u0447\u0430\u0442.</li> <li><code>answer(text, reply_markup=None, ...)</code>: \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u0434\u043b\u044f <code>reply</code>.</li> <li><code>edit_message(text, reply_markup=None, ...)</code>: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>delete_message()</code>: \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>answer_callback(text=None, show_alert=False, message=None)</code>: \u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 callback.</li> </ul>"},{"location":"api/#_14","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","text":"<ul> <li><code>get_chat()</code>: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0447\u0430\u0442\u0435.</li> <li><code>get_chat_members()</code>: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0430\u0442\u0430.</li> <li><code>send_action(action)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 (typing, etc.).</li> <li><code>pin_message()</code>: \u0417\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>unpin_message()</code>: \u041e\u0442\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> </ul>"},{"location":"api/#8","title":"8. \u0424\u0438\u043b\u044c\u0442\u0440\u044b","text":"<p>\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0440\u0435\u0448\u0430\u044e\u0442, \u0431\u0443\u0434\u0435\u0442 \u043b\u0438 \u0432\u044b\u0437\u0432\u0430\u043d \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c.</p>"},{"location":"api/#_15","title":"\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b","text":"<pre><code>from maxbot.filters import command, text, regex, attachment_type, has_attachment\n\n@dp.message_handler(command(\"start\"))\nasync def start_handler(ctx: Context): ...\n\n@dp.message_handler(text(\"\u043f\u0440\u0438\u0432\u0435\u0442\", exact=False))\nasync def hello_handler(ctx: Context): ...\n\n@dp.message_handler(regex(r\"^\\d+$\"))\nasync def number_handler(ctx: Context): ...\n\n@dp.message_handler(attachment_type(\"image\"))\nasync def image_handler(ctx: Context): ...\n\n@dp.message_handler(has_attachment(True))\nasync def attachment_handler(ctx: Context): ...\n</code></pre>"},{"location":"api/#_16","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b","text":"<ul> <li><code>user_filter(user_ids)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442, \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li><code>time_filter(start_hour, end_hour)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</li> <li><code>custom_filter(func)</code>: \u0412\u0430\u0448 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>lambda ctx: ...</code>.</li> </ul>"},{"location":"api/#_17","title":"\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432","text":"<pre><code>from maxbot.filters import and_filter, or_filter, not_filter\n\n@dp.message_handler(and_filter(command(\"admin\"), user_filter([123, 456])))\n@dp.message_handler(or_filter(command(\"start\"), text(\"\u043f\u043e\u043c\u043e\u0449\u044c\")))\n@dp.message_handler(not_filter(text(\"\u0441\u043f\u0430\u043c\")))\n</code></pre>"},{"location":"api/#9","title":"9. \u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>SDK \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Pydantic \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438\u0437 <code>maxbot</code>.</p>"},{"location":"api/#_18","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","text":"<ul> <li><code>User</code>: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c.</li> <li><code>user_id: int</code></li> <li><code>name: str</code></li> <li><code>first_name: str | None</code></li> <li><code>last_name: str | None</code></li> <li><code>Chat</code>: \u0427\u0430\u0442.</li> <li><code>chat_id: int</code></li> <li><code>chat_type: str</code> - (<code>private</code> \u0438\u043b\u0438 <code>group</code>)</li> <li><code>Message</code>: \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 <code>sender: User</code>, <code>recipient: Chat</code>, <code>body: MessageBody</code>.</li> <li><code>MessageBody</code>: \u0422\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 <code>text</code> \u0438 <code>attachments</code>.</li> <li><code>BaseAttachment</code>: \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 <code>type</code>, <code>url</code>, <code>filename</code>, <code>size</code> \u0438 \u0442.\u0434.</li> </ul>"},{"location":"api/#_19","title":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b","text":"<ul> <li><code>InlineKeyboardButton</code>: \u041a\u043d\u043e\u043f\u043a\u0430 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b.</li> <li><code>text: str</code> - \u0442\u0435\u043a\u0441\u0442 \u043a\u043d\u043e\u043f\u043a\u0438</li> <li><code>payload: str | None</code> - \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f callback</li> <li><code>url: str | None</code> - \u0441\u0441\u044b\u043b\u043a\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430</li> <li><code>InlineKeyboardMarkup</code>: Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430.</li> <li><code>inline_keyboard: List[List[InlineKeyboardButton]]</code> - \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u043d\u043e\u043f\u043e\u043a</li> </ul>"},{"location":"api/#callback_1","title":"Callback","text":"<ul> <li><code>CallbackQuery</code>: Callback-\u0437\u0430\u043f\u0440\u043e\u0441.</li> <li><code>callback_id: str</code> - ID callback</li> <li><code>user: User</code> - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043d\u0430\u0436\u0430\u0432\u0448\u0438\u0439 \u043a\u043d\u043e\u043f\u043a\u0443</li> <li><code>payload: str | None</code> - \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043d\u043e\u043f\u043a\u0438</li> <li><code>message: Message | None</code> - \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043a\u043d\u043e\u043f\u043a\u043e\u0439</li> </ul>"},{"location":"api/#10","title":"10. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":""},{"location":"api/#_20","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<pre><code>from maxbot.middleware import ErrorHandlingMiddleware\n\ndp.include_middleware(ErrorHandlingMiddleware())\n</code></pre>"},{"location":"api/#_21","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<pre><code>async def error_handler(ctx: Context, error: Exception):\n    logger.error(f\"Error in handler: {error}\")\n    await ctx.reply(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u043d\u043e \u044f \u0443\u0436\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u043b \u043e \u043d\u0435\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c.\")\n\ndp.include_middleware(ErrorHandlingMiddleware(error_handler=error_handler))\n</code></pre>"},{"location":"api/#try-catch","title":"Try-catch \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445","text":"<pre><code>@dp.message_handler(F.command == \"risky\")\nasync def risky_handler(ctx: Context):\n    try:\n        # \u0420\u0438\u0441\u043a\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\n        result = await some_risky_operation()\n        await ctx.reply(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {result}\")\n    except ValueError as e:\n        await ctx.reply(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438: {e}\")\n    except Exception as e:\n        logger.error(f\"\u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430: {e}\")\n        await ctx.reply(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\")\n</code></pre>"},{"location":"api/#11","title":"11. \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>SDK \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 loguru \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> <pre><code>from loguru import logger\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\nlogger.add(\"bot.log\", rotation=\"1 day\", retention=\"7 days\")\n\n# \u0412 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445\n@dp.message_handler(F.command == \"debug\")\nasync def debug_handler(ctx: Context):\n    logger.info(f\"User {ctx.user_id} sent command: {ctx.text}\")\n    logger.debug(f\"Full context: {ctx}\")\n</code></pre>"},{"location":"api/#12","title":"12. \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":""},{"location":"api/#_22","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<pre><code>my_bot/\n\u251c\u2500\u2500 main.py          # \u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430\n\u251c\u2500\u2500 handlers/        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 commands.py\n\u2502   \u251c\u2500\u2500 callbacks.py\n\u2502   \u2514\u2500\u2500 messages.py\n\u251c\u2500\u2500 middleware/      # Middleware\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 custom.py\n\u251c\u2500\u2500 utils/           # \u0423\u0442\u0438\u043b\u0438\u0442\u044b\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 helpers.py\n\u2514\u2500\u2500 config.py        # \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\n</code></pre>"},{"location":"api/#_23","title":"\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<pre><code># handlers/commands.py\nfrom maxbot import F, Context\n\ndef register_commands(dp):\n    @dp.message_handler(F.command == \"start\")\n    async def start_handler(ctx: Context):\n        # \u041b\u043e\u0433\u0438\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b start\n\n    @dp.message_handler(F.command == \"help\")\n    async def help_handler(ctx: Context):\n        # \u041b\u043e\u0433\u0438\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b help\n\n# main.py\nfrom handlers.commands import register_commands\n\ndp = Dispatcher(bot)\nregister_commands(dp)\n</code></pre>"},{"location":"api/#_24","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c","text":"<pre><code># \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\nuser_states = {}\n\n@dp.message_handler(F.command == \"game\")\nasync def start_game(ctx: Context):\n    user_states[ctx.user_id] = {\"game\": \"started\", \"score\": 0}\n    await ctx.reply(\"\u0418\u0433\u0440\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c!\")\n\n@dp.message_handler(lambda ctx: user_states.get(ctx.user_id, {}).get(\"game\") == \"started\")\nasync def game_handler(ctx: Context):\n    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0433\u0440\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    pass\n</code></pre>"},{"location":"examples/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0431\u043e\u0442\u043e\u0432, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 AsyncMaxBot SDK \u0432\u0435\u0440\u0441\u0438\u0438 1.3.10. \u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u044f\u0442\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p>"},{"location":"examples/#1-inline","title":"1. \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0441 Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 \ud83c\udfb0","text":"<p>\u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0433\u0440\u044b \u0432 \u0431\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440, callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u044b.</p> <pre><code>import asyncio\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\nimport random\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\n# \u041a\u0430\u0440\u0442\u044b \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nSUITS = [\"\u2660\", \"\u2665\", \"\u2666\", \"\u2663\"]\nRANKS = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"]\nVALUES = {\"A\": 11, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 10, \"Q\": 10, \"K\": 10}\n\n# \u0418\u0433\u0440\u043e\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\nGAMES = {}\n\nclass GameState:\n    def __init__(self):\n        self.deck = self._create_deck()\n        self.player = []\n        self.dealer = []\n        self.finished = False\n        self.result = \"\"\n\n    def _create_deck(self):\n        deck = []\n        for suit in SUITS:\n            for rank in RANKS:\n                deck.append(f\"{rank}{suit}\")\n        random.shuffle(deck)\n        return deck\n\n    def deal_initial(self):\n        self.player = [self.deck.pop(), self.deck.pop()]\n        self.dealer = [self.deck.pop(), self.deck.pop()]\n\n    def hit(self):\n        if not self.finished:\n            self.player.append(self.deck.pop())\n            if self.get_hand_value(self.player) &gt; 21:\n                self.finished = True\n                self.result = \"\ud83d\udca5 \u041f\u0435\u0440\u0435\u0431\u043e\u0440! \u0412\u044b \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b\u0438!\"\n\n    def stand(self):\n        if not self.finished:\n            self.finished = True\n            while self.get_hand_value(self.dealer) &lt; 17:\n                self.dealer.append(self.deck.pop())\n\n            player_value = self.get_hand_value(self.player)\n            dealer_value = self.get_hand_value(self.dealer)\n\n            if dealer_value &gt; 21:\n                self.result = \"\ud83c\udf89 \u0414\u0438\u043b\u0435\u0440 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u043b! \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &gt; dealer_value:\n                self.result = \"\ud83c\udf89 \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &lt; dealer_value:\n                self.result = \"\ud83d\ude14 \u0414\u0438\u043b\u0435\u0440 \u0432\u044b\u0438\u0433\u0440\u0430\u043b!\"\n            else:\n                self.result = \"\ud83e\udd1d \u041d\u0438\u0447\u044c\u044f!\"\n\n    def surrender(self):\n        if not self.finished:\n            self.finished = True\n            self.result = \"\ud83c\udff3\ufe0f \u0412\u044b \u0441\u0434\u0430\u043b\u0438\u0441\u044c!\"\n\n    def get_hand_value(self, hand):\n        value = 0\n        aces = 0\n\n        for card in hand:\n            rank = card[:-1]  # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u0441\u0442\u044c\n            card_value = VALUES[rank]\n            if card_value == 11:\n                aces += 1\n            else:\n                value += card_value\n\n        for _ in range(aces):\n            if value + 11 &lt;= 21:\n                value += 11\n            else:\n                value += 1\n\n        return value\n\n    def get_display_text(self):\n        player_value = self.get_hand_value(self.player)\n        dealer_value = self.get_hand_value(self.dealer)\n\n        text = f\"\ud83c\udfb2 **\u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a**\\n\\n\"\n        text += f\"\ud83d\udc64 **\u0412\u0430\u0448\u0438 \u043a\u0430\u0440\u0442\u044b:** {' '.join(self.player)} = {player_value}\\n\"\n\n        if self.finished:\n            text += f\"\ud83e\udd16 **\u041a\u0430\u0440\u0442\u044b \u0434\u0438\u043b\u0435\u0440\u0430:** {' '.join(self.dealer)} = {dealer_value}\\n\\n\"\n            text += f\"**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:** {self.result}\"\n        else:\n            text += f\"\ud83e\udd16 **\u041a\u0430\u0440\u0442\u0430 \u0434\u0438\u043b\u0435\u0440\u0430:** {self.dealer[0]} ?\\n\\n\"\n            text += \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\"\n\n        return text\n\ndef get_keyboard(finished=False):\n    if finished:\n        return InlineKeyboardMarkup(\n            inline_keyboard=[[InlineKeyboardButton(text=\"\ud83d\udd04 \u0421\u044b\u0433\u0440\u0430\u0442\u044c \u0435\u0449\u0451\", payload=\"restart\")]]\n        )\n    return InlineKeyboardMarkup(\n        inline_keyboard=[\n            [\n                InlineKeyboardButton(text=\"\ud83c\udccf \u0412\u0437\u044f\u0442\u044c\", payload=\"hit\"),\n                InlineKeyboardButton(text=\"\u270b \u0421\u0442\u043e\u043f\", payload=\"stand\"),\n                InlineKeyboardButton(text=\"\ud83c\udff3\ufe0f \u0421\u0434\u0430\u0442\u044c\u0441\u044f\", payload=\"surrender\"),\n            ]\n        ]\n    )\n\nasync def main():\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        @dp.message_handler(F.command == \"start\")\n        async def start(ctx: Context):\n            GAMES[ctx.user_id] = GameState()\n            game = GAMES[ctx.user_id]\n            game.deal_initial()\n\n            await ctx.reply(\n                game.get_display_text(),\n                reply_markup=get_keyboard()\n            )\n\n        @dp.callback_query_handler(F.payload == \"hit\")\n        async def hit_handler(ctx: Context):\n            if ctx.user_id not in GAMES:\n                await ctx.answer_callback(\"\u274c \u0418\u0433\u0440\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0438\u0433\u0440\u0443!\")\n                return\n\n            game = GAMES[ctx.user_id]\n            game.hit()\n\n            await ctx.answer_callback(\"\ud83c\udccf \u041a\u0430\u0440\u0442\u0430 \u0432\u0437\u044f\u0442\u0430!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard(game.finished)\n            )\n\n        @dp.callback_query_handler(F.payload == \"stand\")\n        async def stand_handler(ctx: Context):\n            if ctx.user_id not in GAMES:\n                await ctx.answer_callback(\"\u274c \u0418\u0433\u0440\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0438\u0433\u0440\u0443!\")\n                return\n\n            game = GAMES[ctx.user_id]\n            game.stand()\n\n            await ctx.answer_callback(\"\u270b \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438\u0441\u044c!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard(game.finished)\n            )\n\n        @dp.callback_query_handler(F.payload == \"surrender\")\n        async def surrender_handler(ctx: Context):\n            if ctx.user_id not in GAMES:\n                await ctx.answer_callback(\"\u274c \u0418\u0433\u0440\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0438\u0433\u0440\u0443!\")\n                return\n\n            game = GAMES[ctx.user_id]\n            game.surrender()\n\n            await ctx.answer_callback(\"\ud83c\udff3\ufe0f \u0421\u0434\u0430\u043b\u0438\u0441\u044c!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard(game.finished)\n            )\n\n        @dp.callback_query_handler(F.payload == \"restart\")\n        async def restart_handler(ctx: Context):\n            GAMES[ctx.user_id] = GameState()\n            game = GAMES[ctx.user_id]\n            game.deal_initial()\n\n            await ctx.answer_callback(\"\ud83d\udd04 \u041d\u043e\u0432\u0430\u044f \u0438\u0433\u0440\u0430!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard()\n            )\n\n        print(\"\ud83c\udfb0 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#2-magicfilter","title":"2. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u044d\u0445\u043e-\u0431\u043e\u0442 \u0441 MagicFilter \ud83e\udd16","text":"<p>\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0438 middleware.</p> <pre><code>import asyncio\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.middleware import LoggingMiddleware, ThrottlingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\nasync def main():\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c middleware\n        dp.include_middleware(LoggingMiddleware())\n        dp.include_middleware(ThrottlingMiddleware(rate_limit=1.0))\n        dp.include_middleware(ErrorHandlingMiddleware())\n\n        # \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\n        stats = {\"messages\": 0, \"users\": set()}\n\n        @dp.message_handler(F.command == \"start\")\n        async def start_handler(ctx: Context):\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"stats\")],\n                    [InlineKeyboardButton(text=\"\u2139\ufe0f \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")]\n                ]\n            )\n            await ctx.reply(\n                f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u044d\u0445\u043e-\u0431\u043e\u0442.\\n\"\n                \"\ud83c\udfaf \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 MagicFilter \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439!\",\n                reply_markup=keyboard\n            )\n\n        @dp.message_handler(F.command == \"help\")\n        async def help_handler(ctx: Context):\n            help_text = \"\"\"\n\ud83c\udfaf **MagicFilter \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438:**\n\n**\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f:**\n- `F.text == \"\u043f\u0440\u0438\u0432\u0435\u0442\"`\n- `F.user_id == 123`\n- `F.chat_id != 456`\n\n**\u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438:**\n- `F.text.contains(\"hello\")`\n- `F.text.startswith(\"/\")`\n- `F.text.endswith(\"!\")`\n\n**\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:**\n- `F.text.contains(\"admin\") &amp; F.user_id == 123`\n- `F.command == \"start\" | F.text.startswith(\"help\")`\n- `~F.text.startswith(\"/\")`\n\n**\u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f:**\n- `F.has_attachments == True`\n- `F.attachment.type == \"image\"`\n            \"\"\"\n            await ctx.reply(help_text)\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n        @dp.message_handler(F.has_attachments == True &amp; F.attachment.type == \"image\")\n        async def image_handler(ctx: Context):\n            stats[\"messages\"] += 1\n            stats[\"users\"].add(ctx.user_id)\n\n            await ctx.reply(\n                f\"\ud83d\udcf8 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435!\\n\"\n                f\"\ud83d\udcca \u0412\u0441\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: {stats['messages']}\\n\"\n                f\"\ud83d\udc65 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: {len(stats['users'])}\"\n            )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u043e\u0442 \u0430\u0434\u043c\u0438\u043d\u043e\u0432\n        @dp.message_handler(F.command.in_([\"admin\", \"stats\"]) &amp; F.user_id.in_([123, 456, 789]))\n        async def admin_handler(ctx: Context):\n            if ctx.command == \"stats\":\n                await ctx.reply(\n                    f\"\ud83d\udcca **\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0431\u043e\u0442\u0430:**\\n\"\n                    f\"\ud83d\udcac \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: {stats['messages']}\\n\"\n                    f\"\ud83d\udc65 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: {len(stats['users'])}\"\n                )\n            elif ctx.command == \"admin\":\n                await ctx.reply(\"\ud83d\udd10 \u0410\u0434\u043c\u0438\u043d \u043f\u0430\u043d\u0435\u043b\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430!\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0447\u0438\u0441\u0435\u043b\n        @dp.message_handler(F.text.regex(r\"^\\d+$\"))\n        async def number_handler(ctx: Context):\n            number = int(ctx.text)\n            await ctx.reply(f\"\ud83d\udd22 \u0412\u044b \u0432\u0432\u0435\u043b\u0438 \u0447\u0438\u0441\u043b\u043e: {number}\\n\u041a\u0432\u0430\u0434\u0440\u0430\u0442: {number ** 2}\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0439\n        @dp.message_handler(\n            (F.text.contains(\"\u043f\u0440\u0438\u0432\u0435\u0442\") | F.text.contains(\"hello\")) &amp; \n            ~F.text.startswith(\"/\")\n        )\n        async def greeting_handler(ctx: Context):\n            await ctx.reply(f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u0420\u0430\u0434 \u0442\u0435\u0431\u044f \u0432\u0438\u0434\u0435\u0442\u044c!\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 callback\n        @dp.callback_query_handler(F.payload == \"stats\")\n        async def stats_callback(ctx: Context):\n            await ctx.answer_callback(\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\")\n            await ctx.edit_message(\n                f\"\ud83d\udcca **\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:**\\n\"\n                f\"\ud83d\udcac \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: {stats['messages']}\\n\"\n                f\"\ud83d\udc65 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: {len(stats['users'])}\"\n            )\n\n        @dp.callback_query_handler(F.payload == \"help\")\n        async def help_callback(ctx: Context):\n            await ctx.answer_callback(\"\u2139\ufe0f \u0421\u043f\u0440\u0430\u0432\u043a\u0430\")\n            await ctx.edit_message(\"\u042d\u0442\u043e \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u044d\u0445\u043e-\u0431\u043e\u0442 \u0441 MagicFilter!\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        @dp.message_handler()\n        async def echo_handler(ctx: Context):\n            if ctx.text and not ctx.text.startswith(\"/\"):\n                stats[\"messages\"] += 1\n                stats[\"users\"].add(ctx.user_id)\n\n                emoji = \"\ud83e\udd9c\" if \"\u043f\u0440\u0438\u0432\u0435\u0442\" in ctx.text.lower() else \"\ud83d\udce2\"\n                await ctx.reply(f\"{emoji} {ctx.text}\")\n\n        print(\"\ud83e\udd16 \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u044d\u0445\u043e-\u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#3-","title":"3. \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \ud83d\udcdd","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439.</p> <pre><code>import asyncio\nfrom datetime import datetime\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\n# \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\nTASKS = {}\nUSER_STATES = {}\n\nclass Task:\n    def __init__(self, text, user_id):\n        self.id = len(TASKS) + 1\n        self.text = text\n        self.user_id = user_id\n        self.created_at = datetime.now()\n        self.completed = False\n        self.completed_at = None\n\ndef get_tasks_keyboard(tasks, show_completed=True):\n    keyboard = []\n\n    for task in tasks:\n        if task.completed and not show_completed:\n            continue\n\n        status = \"\u2705\" if task.completed else \"\u23f3\"\n        text = f\"{status} {task.text[:30]}...\"\n\n        keyboard.append([\n            InlineKeyboardButton(\n                text=text,\n                payload=f\"task_{task.id}\"\n            )\n        ])\n\n    # \u041a\u043d\u043e\u043f\u043a\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n    keyboard.append([\n        InlineKeyboardButton(text=\"\u2795 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\", payload=\"add_task\"),\n        InlineKeyboardButton(text=\"\ud83d\udccb \u0412\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\", payload=\"all_tasks\")\n    ])\n\n    if show_completed:\n        keyboard.append([InlineKeyboardButton(text=\"\u23f3 \u0422\u043e\u043b\u044c\u043a\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435\", payload=\"active_tasks\")])\n    else:\n        keyboard.append([InlineKeyboardButton(text=\"\u2705 \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435\", payload=\"all_tasks\")])\n\n    return InlineKeyboardMarkup(inline_keyboard=keyboard)\n\nasync def main():\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        @dp.message_handler(F.command == \"start\")\n        async def start_handler(ctx: Context):\n            USER_STATES[ctx.user_id] = {\"state\": \"main\"}\n\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [InlineKeyboardButton(text=\"\ud83d\udcdd \u041c\u043e\u0438 \u0437\u0430\u0434\u0430\u0447\u0438\", payload=\"my_tasks\")],\n                    [InlineKeyboardButton(text=\"\u2795 \u041d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430\", payload=\"add_task\")],\n                    [InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"stats\")]\n                ]\n            )\n\n            await ctx.reply(\n                f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u0442\u0432\u043e\u0439 \u043b\u0438\u0447\u043d\u044b\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c.\\n\"\n                \"\ud83d\udcdd \u042f \u043f\u043e\u043c\u043e\u0433\u0443 \u0442\u0435\u0431\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f\u043c\u0438.\",\n                reply_markup=keyboard\n            )\n\n        @dp.message_handler(F.command == \"tasks\")\n        async def tasks_handler(ctx: Context):\n            user_tasks = [task for task in TASKS.values() if task.user_id == ctx.user_id]\n\n            if not user_tasks:\n                await ctx.reply(\"\ud83d\udcdd \u0423 \u0432\u0430\u0441 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u0437\u0430\u0434\u0430\u0447. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u0443\u044e!\")\n                return\n\n            await ctx.reply(\n                \"\ud83d\udcdd \u0412\u0430\u0448\u0438 \u0437\u0430\u0434\u0430\u0447\u0438:\",\n                reply_markup=get_tasks_keyboard(user_tasks)\n            )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438\n        @dp.callback_query_handler(F.payload == \"add_task\")\n        async def add_task_handler(ctx: Context):\n            USER_STATES[ctx.user_id] = {\"state\": \"waiting_task_text\"}\n            await ctx.answer_callback(\"\u2795 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\")\n            await ctx.edit_message(\"\ud83d\udcdd \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438:\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0432\u043e\u0434\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438\n        @dp.message_handler(lambda ctx: USER_STATES.get(ctx.user_id, {}).get(\"state\") == \"waiting_task_text\")\n        async def task_text_handler(ctx: Context):\n            if not ctx.text or len(ctx.text.strip()) &lt; 3:\n                await ctx.reply(\"\u274c \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0443\u043c 3 \u0441\u0438\u043c\u0432\u043e\u043b\u0430.\")\n                return\n\n            # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443\n            task = Task(ctx.text.strip(), ctx.user_id)\n            TASKS[task.id] = task\n\n            USER_STATES[ctx.user_id] = {\"state\": \"main\"}\n\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [InlineKeyboardButton(text=\"\ud83d\udcdd \u041c\u043e\u0438 \u0437\u0430\u0434\u0430\u0447\u0438\", payload=\"my_tasks\")],\n                    [InlineKeyboardButton(text=\"\u2795 \u0415\u0449\u0451 \u0437\u0430\u0434\u0430\u0447\u0430\", payload=\"add_task\")]\n                ]\n            )\n\n            await ctx.reply(\n                f\"\u2705 \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430!\\n\ud83d\udcdd {task.text}\",\n                reply_markup=keyboard\n            )\n\n        # \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0437\u0430\u0434\u0430\u0447\n        @dp.callback_query_handler(F.payload == \"my_tasks\")\n        async def my_tasks_handler(ctx: Context):\n            user_tasks = [task for task in TASKS.values() if task.user_id == ctx.user_id]\n\n            if not user_tasks:\n                await ctx.answer_callback(\"\ud83d\udcdd \u041d\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\")\n                await ctx.edit_message(\"\ud83d\udcdd \u0423 \u0432\u0430\u0441 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u0437\u0430\u0434\u0430\u0447. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u0443\u044e!\")\n                return\n\n            await ctx.answer_callback(\"\ud83d\udcdd \u0412\u0430\u0448\u0438 \u0437\u0430\u0434\u0430\u0447\u0438\")\n            await ctx.edit_message(\n                \"\ud83d\udcdd \u0412\u0430\u0448\u0438 \u0437\u0430\u0434\u0430\u0447\u0438:\",\n                reply_markup=get_tasks_keyboard(user_tasks)\n            )\n\n        # \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438\n        @dp.callback_query_handler(F.payload.startswith(\"task_\"))\n        async def task_detail_handler(ctx: Context):\n            task_id = int(ctx.payload.split(\"_\")[1])\n            task = TASKS.get(task_id)\n\n            if not task or task.user_id != ctx.user_id:\n                await ctx.answer_callback(\"\u274c \u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n                return\n\n            status = \"\u2705 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430\" if task.completed else \"\u23f3 \u0412 \u0440\u0430\u0431\u043e\u0442\u0435\"\n            created = task.created_at.strftime(\"%d.%m.%Y %H:%M\")\n\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [\n                        InlineKeyboardButton(\n                            text=\"\u2705 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\" if not task.completed else \"\ud83d\udd04 \u0412\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c\",\n                            payload=f\"toggle_{task_id}\"\n                        ),\n                        InlineKeyboardButton(text=\"\ud83d\uddd1\ufe0f \u0423\u0434\u0430\u043b\u0438\u0442\u044c\", payload=f\"delete_{task_id}\")\n                    ],\n                    [InlineKeyboardButton(text=\"\ud83d\udccb \u041d\u0430\u0437\u0430\u0434 \u043a \u0441\u043f\u0438\u0441\u043a\u0443\", payload=\"my_tasks\")]\n                ]\n            )\n\n            await ctx.answer_callback(\"\ud83d\udcdd \u0414\u0435\u0442\u0430\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0438\")\n            await ctx.edit_message(\n                f\"\ud83d\udcdd **\u0417\u0430\u0434\u0430\u0447\u0430 #{task_id}**\\n\\n\"\n                f\"\ud83d\udcc4 {task.text}\\n\\n\"\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0443\u0441: {status}\\n\"\n                f\"\ud83d\udcc5 \u0421\u043e\u0437\u0434\u0430\u043d\u0430: {created}\",\n                reply_markup=keyboard\n            )\n\n        # \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438\n        @dp.callback_query_handler(F.payload.startswith(\"toggle_\"))\n        async def toggle_task_handler(ctx: Context):\n            task_id = int(ctx.payload.split(\"_\")[1])\n            task = TASKS.get(task_id)\n\n            if not task or task.user_id != ctx.user_id:\n                await ctx.answer_callback(\"\u274c \u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n                return\n\n            task.completed = not task.completed\n            if task.completed:\n                task.completed_at = datetime.now()\n                await ctx.answer_callback(\"\u2705 \u0417\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430!\")\n            else:\n                task.completed_at = None\n                await ctx.answer_callback(\"\ud83d\udd04 \u0417\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430!\")\n\n            # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u0430\u0434\u0430\u0447\n            user_tasks = [t for t in TASKS.values() if t.user_id == ctx.user_id]\n            await ctx.edit_message(\n                \"\ud83d\udcdd \u0412\u0430\u0448\u0438 \u0437\u0430\u0434\u0430\u0447\u0438:\",\n                reply_markup=get_tasks_keyboard(user_tasks)\n            )\n\n        # \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\n        @dp.callback_query_handler(F.payload == \"stats\")\n        async def stats_handler(ctx: Context):\n            user_tasks = [task for task in TASKS.values() if task.user_id == ctx.user_id]\n            completed = sum(1 for task in user_tasks if task.completed)\n            total = len(user_tasks)\n\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [InlineKeyboardButton(text=\"\ud83d\udcdd \u041c\u043e\u0438 \u0437\u0430\u0434\u0430\u0447\u0438\", payload=\"my_tasks\")],\n                    [InlineKeyboardButton(text=\"\ud83d\udd19 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\", payload=\"main_menu\")]\n                ]\n            )\n\n            await ctx.answer_callback(\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\")\n            await ctx.edit_message(\n                f\"\ud83d\udcca **\u0412\u0430\u0448\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:**\\n\\n\"\n                f\"\ud83d\udcdd \u0412\u0441\u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447: {total}\\n\"\n                f\"\u2705 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e: {completed}\\n\"\n                f\"\u23f3 \u0412 \u0440\u0430\u0431\u043e\u0442\u0435: {total - completed}\\n\"\n                f\"\ud83d\udcc8 \u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441: {completed/total*100:.1f}%\" if total &gt; 0 else \"\ud83d\udcc8 \u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441: 0%\",\n                reply_markup=keyboard\n            )\n\n        # \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\n        @dp.callback_query_handler(F.payload == \"main_menu\")\n        async def main_menu_handler(ctx: Context):\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [InlineKeyboardButton(text=\"\ud83d\udcdd \u041c\u043e\u0438 \u0437\u0430\u0434\u0430\u0447\u0438\", payload=\"my_tasks\")],\n                    [InlineKeyboardButton(text=\"\u2795 \u041d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430\", payload=\"add_task\")],\n                    [InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"stats\")]\n                ]\n            )\n\n            await ctx.answer_callback(\"\ud83c\udfe0 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\")\n            await ctx.edit_message(\n                f\"\ud83d\udc4b \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e, {ctx.user.name}!\",\n                reply_markup=keyboard\n            )\n\n        print(\"\ud83d\udcdd \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#4","title":"4. \u0411\u043e\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \ud83d\udcce","text":"<p>\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438.</p> <pre><code>import asyncio\nimport os\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.middleware import LoggingMiddleware\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\n# \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b\nSUPPORTED_IMAGES = ['.jpg', '.jpeg', '.png', '.gif', '.webp']\nSUPPORTED_VIDEOS = ['.mp4', '.avi', '.mov', '.mkv']\nSUPPORTED_AUDIO = ['.mp3', '.wav', '.ogg', '.m4a']\nSUPPORTED_DOCS = ['.pdf', '.doc', '.docx', '.txt', '.rtf']\n\nasync def main():\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n        dp.include_middleware(LoggingMiddleware())\n\n        @dp.message_handler(F.command == \"start\")\n        async def start_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u0431\u043e\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438.\\n\\n\"\n                \"\ud83d\udcce \u041e\u0442\u043f\u0440\u0430\u0432\u044c \u043c\u043d\u0435 \u0444\u0430\u0439\u043b \u043b\u044e\u0431\u043e\u0433\u043e \u0442\u0438\u043f\u0430, \u0438 \u044f:\\n\"\n                \"\u2022 \ud83d\udcf8 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\\n\"\n                \"\u2022 \ud83c\udfa5 \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e \u0432\u0438\u0434\u0435\u043e\\n\"\n                \"\u2022 \ud83c\udfb5 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u044e \u0430\u0443\u0434\u0438\u043e\\n\"\n                \"\u2022 \ud83d\udcc4 \u041f\u0440\u043e\u0447\u0438\u0442\u0430\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b\\n\\n\"\n                \"\ud83d\udca1 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b:\\n\"\n                f\"\ud83d\udcf8 \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: {', '.join(SUPPORTED_IMAGES)}\\n\"\n                f\"\ud83c\udfa5 \u0412\u0438\u0434\u0435\u043e: {', '.join(SUPPORTED_VIDEOS)}\\n\"\n                f\"\ud83c\udfb5 \u0410\u0443\u0434\u0438\u043e: {', '.join(SUPPORTED_AUDIO)}\\n\"\n                f\"\ud83d\udcc4 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b: {', '.join(SUPPORTED_DOCS)}\"\n            )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n        @dp.message_handler(F.has_attachments == True &amp; F.attachment.type == \"image\")\n        async def image_handler(ctx: Context):\n            await ctx.reply(\"\ud83d\udcf8 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435! \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e...\")\n\n            for attachment in ctx.attachments:\n                if attachment.type == \"image\":\n                    await ctx.reply(\n                        f\"\ud83d\udcf8 **\u0410\u043d\u0430\u043b\u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f:**\\n\\n\"\n                        f\"\ud83d\udcc1 \u0424\u0430\u0439\u043b: {attachment.filename or '\u0411\u0435\u0437 \u0438\u043c\u0435\u043d\u0438'}\\n\"\n                        f\"\ud83d\udccf \u0420\u0430\u0437\u043c\u0435\u0440: {attachment.size or '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'} \u0431\u0430\u0439\u0442\\n\"\n                        f\"\ud83d\udd17 URL: {attachment.url or '\u041d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d'}\\n\\n\"\n                        f\"\u2728 \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e!\"\n                    )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0438\u0434\u0435\u043e\n        @dp.message_handler(F.has_attachments == True &amp; F.attachment.type == \"video\")\n        async def video_handler(ctx: Context):\n            await ctx.reply(\"\ud83c\udfa5 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0432\u0438\u0434\u0435\u043e! \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e...\")\n\n            for attachment in ctx.attachments:\n                if attachment.type == \"video\":\n                    await ctx.reply(\n                        f\"\ud83c\udfa5 **\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u0438\u0434\u0435\u043e:**\\n\\n\"\n                        f\"\ud83d\udcc1 \u0424\u0430\u0439\u043b: {attachment.filename or '\u0411\u0435\u0437 \u0438\u043c\u0435\u043d\u0438'}\\n\"\n                        f\"\ud83d\udccf \u0420\u0430\u0437\u043c\u0435\u0440: {attachment.size or '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'} \u0431\u0430\u0439\u0442\\n\"\n                        f\"\ud83d\udd17 URL: {attachment.url or '\u041d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d'}\\n\\n\"\n                        f\"\ud83c\udfac \u0412\u0438\u0434\u0435\u043e \u0433\u043e\u0442\u043e\u0432\u043e \u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435!\"\n                    )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u0443\u0434\u0438\u043e\n        @dp.message_handler(F.has_attachments == True &amp; F.attachment.type == \"audio\")\n        async def audio_handler(ctx: Context):\n            await ctx.reply(\"\ud83c\udfb5 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0430\u0443\u0434\u0438\u043e! \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e...\")\n\n            for attachment in ctx.attachments:\n                if attachment.type == \"audio\":\n                    await ctx.reply(\n                        f\"\ud83c\udfb5 **\u0410\u043d\u0430\u043b\u0438\u0437 \u0430\u0443\u0434\u0438\u043e:**\\n\\n\"\n                        f\"\ud83d\udcc1 \u0424\u0430\u0439\u043b: {attachment.filename or '\u0411\u0435\u0437 \u0438\u043c\u0435\u043d\u0438'}\\n\"\n                        f\"\ud83d\udccf \u0420\u0430\u0437\u043c\u0435\u0440: {attachment.size or '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'} \u0431\u0430\u0439\u0442\\n\"\n                        f\"\ud83d\udd17 URL: {attachment.url or '\u041d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d'}\\n\\n\"\n                        f\"\ud83c\udfb6 \u0410\u0443\u0434\u0438\u043e \u0433\u043e\u0442\u043e\u0432\u043e \u043a \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e!\"\n                    )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432\n        @dp.message_handler(F.has_attachments == True &amp; F.attachment.type == \"file\")\n        async def document_handler(ctx: Context):\n            await ctx.reply(\"\ud83d\udcc4 \u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442! \u0427\u0438\u0442\u0430\u044e...\")\n\n            for attachment in ctx.attachments:\n                if attachment.type == \"file\":\n                    filename = attachment.filename or '\u0411\u0435\u0437 \u0438\u043c\u0435\u043d\u0438'\n                    ext = os.path.splitext(filename)[1].lower()\n\n                    if ext in SUPPORTED_DOCS:\n                        await ctx.reply(\n                            f\"\ud83d\udcc4 **\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430:**\\n\\n\"\n                            f\"\ud83d\udcc1 \u0424\u0430\u0439\u043b: {filename}\\n\"\n                            f\"\ud83d\udccf \u0420\u0430\u0437\u043c\u0435\u0440: {attachment.size or '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'} \u0431\u0430\u0439\u0442\\n\"\n                            f\"\ud83d\udd17 URL: {attachment.url or '\u041d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d'}\\n\"\n                            f\"\ud83d\udccb \u0422\u0438\u043f: {ext.upper()}\\n\\n\"\n                            f\"\ud83d\udcd6 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0433\u043e\u0442\u043e\u0432 \u043a \u0447\u0442\u0435\u043d\u0438\u044e!\"\n                        )\n                    else:\n                        await ctx.reply(\n                            f\"\ud83d\udcc4 **\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0444\u0430\u0439\u043b:**\\n\\n\"\n                            f\"\ud83d\udcc1 \u0424\u0430\u0439\u043b: {filename}\\n\"\n                            f\"\ud83d\udccf \u0420\u0430\u0437\u043c\u0435\u0440: {attachment.size or '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'} \u0431\u0430\u0439\u0442\\n\"\n                            f\"\ud83d\udd17 URL: {attachment.url or '\u041d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d'}\\n\\n\"\n                            f\"\u26a0\ufe0f \u0424\u043e\u0440\u043c\u0430\u0442 {ext} \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\"\n                        )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0441\u0435\u0445 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439\n        @dp.message_handler(F.has_attachments == True)\n        async def any_attachment_handler(ctx: Context):\n            attachment_count = len(ctx.attachments)\n            types = [att.type for att in ctx.attachments]\n\n            await ctx.reply(\n                f\"\ud83d\udcce \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e {attachment_count} \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439:\\n\"\n                f\"\ud83d\udccb \u0422\u0438\u043f\u044b: {', '.join(set(types))}\\n\\n\"\n                f\"\u2705 \u0412\u0441\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b!\"\n            )\n\n        # \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0444\u0430\u0439\u043b\u0430\n        @dp.message_handler(F.command == \"send\")\n        async def send_file_handler(ctx: Context):\n            # \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0444\u0430\u0439\u043b\u0430 (\u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c)\n            try:\n                # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n                await bot.send_photo(\n                    chat_id=ctx.chat_id,\n                    photo=\"path/to/image.jpg\",\n                    caption=\"\ud83d\udcf8 \u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\"\n                )\n                await ctx.reply(\"\u2705 \u0424\u0430\u0439\u043b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d!\")\n            except Exception as e:\n                await ctx.reply(f\"\u274c \u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0444\u0430\u0439\u043b\u0430: {e}\")\n\n        print(\"\ud83d\udcce \u0411\u043e\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#5-","title":"5. \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u044d\u0445\u043e-\u0431\u043e\u0442 \ud83e\udd9c","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u044d\u0445\u043e-\u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430.</p> <pre><code>import asyncio\nfrom maxbot import Bot, Dispatcher, Context, F\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\nasync def main():\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        @dp.message_handler(F.command == \"start\")\n        async def start_handler(ctx: Context):\n            await ctx.reply(f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u044d\u0445\u043e-\u0431\u043e\u0442.\")\n\n        @dp.message_handler(F.command == \"help\")\n        async def help_handler(ctx: Context):\n            await ctx.reply(\n                \"\ud83d\udcda **\u0421\u043f\u0440\u0430\u0432\u043a\u0430:**\\n\\n\"\n                \"\ud83d\udcac \u041f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u044f \u0435\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044e\\n\"\n                \"\u2753 /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\\n\"\n                \"\ud83d\udd04 /start \u2014 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\"\n            )\n\n        @dp.message_handler()\n        async def echo_handler(ctx: Context):\n            if ctx.text and not ctx.text.startswith(\"/\"):\n                await ctx.reply(f\"\ud83e\udd9c {ctx.text}\")\n\n        print(\"\ud83e\udd9c \u042d\u0445\u043e-\u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#_2","title":"\ud83d\ude80 \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432","text":"<ol> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: <pre><code>pip install asyncmaxbot\n</code></pre></p> </li> <li> <p>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0442\u043e\u043a\u0435\u043d:    \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>\"YOUR_TOKEN_HERE\"</code> \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u043e\u0442\u0430.</p> </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440: <pre><code>python example_name.py\n</code></pre></p> </li> </ol>"},{"location":"examples/#_3","title":"\ud83d\udcda \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>\u0412 \u043f\u0430\u043f\u043a\u0435 <code>examples/</code> \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0435\u0449\u0451 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432: - <code>advanced_bot.py</code> - \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0431\u043e\u0442 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 - <code>callback_bot.py</code> - \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 callback - <code>magic_filter_example.py</code> - \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f MagicFilter - <code>attachment_test_bot.py</code> - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 - <code>secretary_bot.py</code> - \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438</p>"},{"location":"examples/#_4","title":"\ud83d\udd27 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0412\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434 \u0432\u0430\u0448\u0438 \u043d\u0443\u0436\u0434\u044b: - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 - \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 callback - \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 middleware \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a - \u0420\u0430\u0441\u0448\u0438\u0440\u044c\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e MagicFilter </p>"}]}