{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":""},{"location":"#asyncmaxbot-sdk","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 AsyncMaxBot SDK!","text":"<p>\u042d\u0442\u043e \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e AsyncMaxBot, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 Python-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432 \u0432 Max Messenger.</p> <p>\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0432\u0441\u0451 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u043e\u0442\u043e\u0432 \u043b\u044e\u0431\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438: \u043e\u0442 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u044d\u0445\u043e-\u0431\u043e\u0442\u043e\u0432 \u0434\u043e \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0441 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439.</p>"},{"location":"#_1","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u0412\u043e\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 <code>/start</code> \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u043b\u044e\u0431\u043e\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0431\u043e\u0447\u0438\u0439.</p> <pre><code>import asyncio\nfrom maxbot import Bot, Dispatcher, Context\nfrom maxbot.filters import command\n\n# \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\nTOKEN = \"YOUR_TOKEN_HERE\"\n\nasync def main():\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c 'async with' \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0435\u0439\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b /start\n        @dp.message_handler(command(\"start\"))\n        async def handle_start(ctx: Context):\n            # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c .user.name \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n            await ctx.reply(f\"\u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}!\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n        @dp.message_handler()\n        async def handle_echo(ctx: Context):\n            if ctx.text:\n                await ctx.reply(f\"\u0412\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438: {ctx.text}\")\n\n        # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439\n        print(\"\u0411\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d...\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    try:\n        asyncio.run(main())\n    except KeyboardInterrupt:\n        print(\"\u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d.\")\n</code></pre>"},{"location":"#_2","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c:","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: <code>pip install asyncmaxbot</code></li> <li>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u043a\u043e\u0434 \u0432 \u0444\u0430\u0439\u043b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>my_bot.py</code>.</li> <li>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>\"YOUR_TOKEN_HERE\"</code> \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u043e\u0442\u0430.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e: <code>python my_bot.py</code></li> </ol>"},{"location":"#_3","title":"\u041a\u0443\u0434\u0430 \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435?","text":"<ul> <li>\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API: \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0441\u044e\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0433\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 SDK.</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430: \u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \"\u0436\u0438\u0432\u044b\u043c\u0438\" \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043a\u043e\u0434\u0430.</li> <li>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 PyPI: \u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u0445.</li> </ul>"},{"location":"api/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u2014 \u0432\u0430\u0448 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c, \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u0438 \u0442\u0438\u043f\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445 AsyncMaxBot SDK, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u0434\u0435.</p>"},{"location":"api/#1","title":"1. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0438 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><pre><code>graph TD\n    A[\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435] --&gt; B[Max API];\n    B --&gt; C{bot.polling};\n    C --\"JSON-\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\"--&gt; D[Dispatcher];\n    D --\"\u041f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432 MiddlewareManager\"--&gt; E[MiddlewareManager];\n    E --\"\u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442 Middleware\"--&gt; F[\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432 Pydantic-\u043c\u043e\u0434\u0435\u043b\u0438];\n    F --\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 Context\"--&gt; G[Context];\n    G --\"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u044b\"--&gt; H{\u0424\u0438\u043b\u044c\u0442\u0440\u044b: command, text, ...};\n    H --\"\u0414\u0410\"--&gt; I[\u0412\u044b\u0437\u043e\u0432 \u0432\u0430\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430];\n    I --\"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Context \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430\"--&gt; J{ctx.reply()};\n    J --\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 Bot\"--&gt; K[Bot.send_message];\n    K --\"HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\"--&gt; B;\n    B --&gt; L[\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442];\n    H --\"\u041d\u0415\u0422\"--&gt; M[\u041f\u043e\u0438\u0441\u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430];\n</code></pre> 1.  \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>bot.polling(dispatcher=dp)</code> \u0431\u043e\u0442 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 Max API \u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. 2.  <code>Dispatcher</code> \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 <code>MiddlewareManager</code>. 3.  Middleware \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435. 4.  \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0441\u044f\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u0433\u043e \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 Pydantic-\u043c\u043e\u0434\u0435\u043b\u0438 (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b \"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445\"). 5.  \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Context</code>. 6.  <code>Dispatcher</code> \u0438\u0449\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0435\u0433\u043e <code>\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c</code>. 7.  \u0415\u0441\u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u044b, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0430\u0448\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 <code>Context</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430.</p>"},{"location":"api/#2-bot","title":"2. \u041a\u043b\u0430\u0441\u0441 <code>Bot</code>","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Max API. \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440.</p> <p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u043a: <pre><code>async with Bot(token=TOKEN) as bot:\n    dp = Dispatcher(bot)\n    # ... \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 ...\n    await bot.polling(dispatcher=dp)\n</code></pre></p>"},{"location":"api/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","text":"<ul> <li><code>polling(dispatcher, ...)</code>: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430.</li> <li><code>get_me()</code> -&gt; <code>dict</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u0442\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f.</li> <li><code>send_message(chat_id, text, ...)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>edit_message(message_id, text, ...)</code>: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>delete_message(message_id)</code>: \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li><code>send_photo(chat_id, photo, ...)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u043e\u0442\u043e. \u0412 <code>photo</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443, <code>io.BytesIO</code> \u0438\u043b\u0438 ID \u0444\u0430\u0439\u043b\u0430.</li> <li><code>send_document(chat_id, document, filename=None, ...)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442.</li> <li><code>get_chat_members(chat_id)</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0430\u0442\u0430.</li> <li><code>send_action(chat_id, action)</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0447\u0430\u0442 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>typing</code>).</li> </ul>"},{"location":"api/#3-dispatcher","title":"3. \u041a\u043b\u0430\u0441\u0441 <code>Dispatcher</code>","text":"<p>\u0414\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 middleware \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0443\u0436\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438.</p> <p><pre><code>from maxbot import Dispatcher\n\ndp = Dispatcher(bot)\n</code></pre> - <code>@dp.message_handler(*filters)</code>: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. - <code>dp.middleware_manager</code>: \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>MiddlewareManager</code>, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c middleware.</p>"},{"location":"api/#4-middleware","title":"4. Middleware","text":"<p>Middleware \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u043a\u0432\u043e\u0437\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>from maxbot.middleware import MiddlewareManager, LoggingMiddleware, ThrottlingMiddleware\n\nmanager = MiddlewareManager()\nmanager.add_middleware(LoggingMiddleware())\nmanager.add_middleware(ThrottlingMiddleware(rate_limit=1.0)) # 1 \u0441\u043e\u043e\u0431\u0449./\u0441\u0435\u043a\ndp.middleware_manager = manager\n</code></pre></p>"},{"location":"api/#middleware","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 Middleware","text":"<ul> <li><code>LoggingMiddleware</code>: \u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445.</li> <li><code>ErrorHandlingMiddleware</code>: \u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445, \u0447\u0442\u043e\u0431\u044b \u0431\u043e\u0442 \u043d\u0435 \u043f\u0430\u0434\u0430\u043b.</li> <li><code>ThrottlingMiddleware</code>: \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li><code>AntispamMiddleware</code>: \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a.</li> <li><code>MetricsMiddleware</code>: \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 (\u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b, \u043a\u043e\u043b-\u0432\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439/\u043e\u0448\u0438\u0431\u043e\u043a).</li> <li><code>UserTrackingMiddleware</code>: \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</li> </ul>"},{"location":"api/#5-context","title":"5. \u041a\u043b\u0430\u0441\u0441 <code>Context</code>","text":"<p>\u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430.</p> <p>\u0418\u043c\u043f\u043e\u0440\u0442: <pre><code>from maxbot import Context\n</code></pre></p>"},{"location":"api/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":"<ul> <li><code>user</code>: \u041e\u0431\u044a\u0435\u043a\u0442 <code>User</code>. \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u043a\u0430\u043a <code>ctx.user.name</code>.</li> <li><code>chat</code>: \u041e\u0431\u044a\u0435\u043a\u0442 <code>Chat</code>.</li> <li><code>message</code>: \u041e\u0431\u044a\u0435\u043a\u0442 <code>Message</code>.</li> <li><code>text</code>: \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (<code>str | None</code>).</li> <li><code>attachments</code>: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 (<code>list[BaseAttachment] | None</code>).</li> <li><code>has_attachments</code>: <code>True</code>, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044c \u043e\u0434\u043d\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</li> <li><code>user_id</code>, <code>chat_id</code>: ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0447\u0430\u0442\u0430.</li> </ul>"},{"location":"api/#_3","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","text":"<ul> <li><code>reply(text, ...)</code>: \u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u0432 \u0442\u043e\u0442 \u0436\u0435 \u0447\u0430\u0442.</li> <li><code>answer(text, ...)</code>: \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u0434\u043b\u044f <code>reply</code>.</li> </ul>"},{"location":"api/#6","title":"6. \u0424\u0438\u043b\u044c\u0442\u0440\u044b","text":"<p>\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0440\u0435\u0448\u0430\u044e\u0442, \u0431\u0443\u0434\u0435\u0442 \u043b\u0438 \u0432\u044b\u0437\u0432\u0430\u043d \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c.</p> <p>\u0418\u043c\u043f\u043e\u0440\u0442 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435: <pre><code>from maxbot.filters import command, text, regex, attachment_type\n\n@dp.message_handler(command(\"start\"))\nasync def start_handler(ctx: Context): ...\n\n@dp.message_handler(text(\"\u043f\u0440\u0438\u0432\u0435\u0442\", exact=False))\nasync def hello_handler(ctx: Context): ...\n</code></pre></p>"},{"location":"api/#_4","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b","text":"<ul> <li><code>command(names)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.</li> <li><code>text(texts, exact=True, ignore_case=False)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0441\u0442.</li> <li><code>regex(pattern)</code>: \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u043f\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u043c\u0443 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e.</li> <li><code>attachment_type(types)</code>: \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 (<code>image</code>, <code>video</code>, <code>file</code> \u0438 \u0442.\u0434.).</li> <li><code>has_attachment(has=True)</code>: \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 (<code>True</code>) \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 (<code>False</code>) \u043b\u044e\u0431\u043e\u0433\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</li> <li><code>user_filter(user_ids)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442, \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li><code>time_filter(start_hour, end_hour)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</li> <li><code>custom_filter(func)</code>: \u0412\u0430\u0448 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>lambda ctx: ...</code>.</li> </ul>"},{"location":"api/#7","title":"7. \u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>SDK \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Pydantic \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438\u0437 <code>maxbot</code>.</p> <ul> <li><code>User</code>: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c.</li> <li><code>user_id: int</code></li> <li><code>name: str</code></li> <li><code>first_name: str | None</code></li> <li><code>last_name: str | None</code></li> <li><code>Chat</code>: \u0427\u0430\u0442.</li> <li><code>chat_id: int</code></li> <li><code>chat_type: str</code> - (<code>private</code> \u0438\u043b\u0438 <code>group</code>)</li> <li><code>Message</code>: \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 <code>sender: User</code>, <code>recipient: Chat</code>, <code>body: MessageBody</code>.</li> <li><code>MessageBody</code>: \u0422\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 <code>text</code> \u0438 <code>attachments</code>.</li> <li><code>BaseAttachment</code>: \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 <code>type</code>, <code>url</code>, <code>filename</code>, <code>size</code> \u0438 \u0442.\u0434. </li> </ul>"},{"location":"examples/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0431\u043e\u0442\u043e\u0432, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 AsyncMaxBot SDK. \u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u044f\u0442\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p>"},{"location":"examples/#1-","title":"1. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u042d\u0445\u043e-\u0431\u043e\u0442 \ud83e\udd16","text":"<p>\u042d\u0442\u043e\u0442 \u0431\u043e\u0442 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439, \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u043e\u0439 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u043c\u0438 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438. \u041e\u043d \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0431\u043e\u0442\u0430 \u043d\u0430 <code>asyncmaxbot</code>.</p> <pre><code>import asyncio\nimport os\nfrom maxbot import Bot\nfrom maxbot.dispatcher import Dispatcher\nfrom maxbot.filters import command, text\nfrom maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import Context\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\ndef get_token():\n    token_file = \"token.txt\"\n    if os.path.exists(token_file):\n        with open(token_file, 'r') as f:\n            return f.read().strip()\n    return os.environ.get(\"MAXBOT_TOKEN\", \"YOUR_TOKEN_HERE\")\n\nTOKEN = get_token()\n\nclass EchoBot:\n    \"\"\"\u042d\u0445\u043e-\u0431\u043e\u0442 \u0441 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439\"\"\"\n\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.stats = {\"messages\": 0, \"users\": set()}\n\n    def setup_middleware(self):\n        manager = MiddlewareManager()\n        manager.add_middleware(LoggingMiddleware())\n        manager.add_middleware(ErrorHandlingMiddleware())\n        self.dp.middleware_manager = manager\n\n    def setup_handlers(self):\n        @self.dp.message_handler(command(\"start\"))\n        async def start_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u044d\u0445\u043e-\u0431\u043e\u0442.\\n\"\n                \"\ud83d\udcdd \u041f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c, \u0438 \u044f \u043f\u043e\u0432\u0442\u043e\u0440\u044e \u044d\u0442\u043e.\\n\"\n                \"\ud83d\udcca /stats \u2014 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\\n\"\n                \"\ud83d\udd04 /echo \u2014 \u0440\u0435\u0436\u0438\u043c \u044d\u0445\u043e\\n\"\n                \"\u2753 /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(command(\"help\"))\n        async def help_handler(ctx: Context):\n            await ctx.reply(\n                \"\ud83d\udcda \u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u044d\u0445\u043e-\u0431\u043e\u0442\u0443:\\n\\n\"\n                \"\ud83d\udcac \u041f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u044f \u0435\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044e\\n\"\n                \"\ud83d\udcca /stats \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\\n\"\n                \"\ud83d\udd04 /echo \u2014 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u044d\u0445\u043e\\n\"\n                \"\u2753 /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(command(\"stats\"))\n        async def stats_handler(ctx: Context):\n            self.stats[\"messages\"] += 1\n            self.stats[\"users\"].add(ctx.user_id)\n\n            await ctx.reply(\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\"\n                f\"\ud83d\udcac \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: {self.stats['messages']}\\n\"\n                f\"\ud83d\udc65 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: {len(self.stats['users'])}\"\n            )\n\n        @self.dp.message_handler()\n        async def echo_handler(ctx: Context):\n            self.stats[\"messages\"] += 1\n            self.stats[\"users\"].add(ctx.user_id)\n\n            if ctx.text.startswith(\"/\"):\n                await ctx.reply(\"\u2753 \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u041d\u0430\u043f\u0438\u0448\u0438 /help\")\n            else:\n                emoji = \"\ud83e\udd9c\" if \"\u043f\u0440\u0438\u0432\u0435\u0442\" in ctx.text.lower() else \"\ud83d\udce2\"\n                await ctx.reply(f\"{emoji} {ctx.text}\")\n\n    async def run(self):\n        print(\"\ud83e\udd16 \u042d\u0445\u043e-\u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        async with self.bot:\n            me = await self.bot.get_me()\n            print(f\"\ud83e\udd16 \u0411\u043e\u0442: {me['name']} (ID: {me['user_id']})\")\n            await self.bot.polling(dispatcher=self.dp)\n\nasync def main():\n    bot = EchoBot()\n    try:\n        await bot.run()\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\uded1 \u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#2","title":"2. \u0411\u043e\u0442 \u0434\u043b\u044f \u0438\u0433\u0440\u044b \u0432 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \ud83c\udfb0","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430 \u0441\u0432\u043e\u044f \u043a\u043e\u043b\u043e\u0434\u0430, \u0440\u0443\u043a\u0430 \u0438 \u0441\u0447\u0435\u0442. \u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432 \u0441 \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u043a\u043e\u0439.</p> <pre><code>import asyncio\nimport os\nimport random\nfrom maxbot import Bot\nfrom maxbot.dispatcher import Dispatcher\nfrom maxbot.filters import command, text\nfrom maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import Context\n\nTOKEN = \"YOUR_TOKEN_HERE\"  # \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u0432\u0430\u0448 \u0442\u043e\u043a\u0435\u043d\n\n# \u041a\u0430\u0440\u0442\u044b \u0434\u043b\u044f \u0438\u0433\u0440\u044b\nCARDS = {\n    '2\u2660': 2, '3\u2660': 3, '4\u2660': 4, '5\u2660': 5, '6\u2660': 6, '7\u2660': 7, '8\u2660': 8, '9\u2660': 9, '10\u2660': 10, 'J\u2660': 10, 'Q\u2660': 10, 'K\u2660': 10, 'A\u2660': 11,\n    '2\u2663': 2, '3\u2663': 3, '4\u2663': 4, '5\u2663': 5, '6\u2663': 6, '7\u2663': 7, '8\u2663': 8, '9\u2663': 9, '10\u2663': 10, 'J\u2663': 10, 'Q\u2663': 10, 'K\u2663': 10, 'A\u2663': 11,\n    '2\u2665': 2, '3\u2665': 3, '4\u2665': 4, '5\u2665': 5, '6\u2665': 6, '7\u2665': 7, '8\u2665': 8, '9\u2665': 9, '10\u2665': 10, 'J\u2665': 10, 'Q\u2665': 10, 'K\u2665': 10, 'A\u2665': 11,\n    '2\u2666': 2, '3\u2666': 3, '4\u2666': 4, '5\u2666': 5, '6\u2666': 6, '7\u2666': 7, '8\u2666': 8, '9\u2666': 9, '10\u2666': 10, 'J\u2666': 10, 'Q\u2666': 10, 'K\u2666': 10, 'A\u2666': 11\n}\n\nclass BlackjackGame:\n    \"\"\"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u0433\u0440\u044b \u0432 \u0431\u043b\u044d\u043a\u0434\u0436\u0435\u043a\"\"\"\n\n    def __init__(self, user_id, user_name):\n        self.user_id = user_id\n        self.user_name = user_name\n        self.deck = list(CARDS.keys())\n        random.shuffle(self.deck)\n        self.player_hand = []\n        self.dealer_hand = []\n        self.game_over = False\n        self.result = \"\"\n\n        # \u0420\u0430\u0437\u0434\u0430\u0447\u0430 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0430\u0440\u0442\n        self.player_hand.append(self.deck.pop())\n        self.dealer_hand.append(self.deck.pop())\n        self.player_hand.append(self.deck.pop())\n        self.dealer_hand.append(self.deck.pop())\n\n    def get_hand_value(self, hand):\n        \"\"\"\u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043e\u0447\u043a\u043e\u0432 \u0432 \u0440\u0443\u043a\u0435\"\"\"\n        value = 0\n        aces = 0\n\n        for card in hand:\n            card_value = CARDS[card]\n            if card_value == 11:  # \u0422\u0443\u0437\n                aces += 1\n            else:\n                value += card_value\n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u0443\u0437\u044b\n        for _ in range(aces):\n            if value + 11 &lt;= 21:\n                value += 11\n            else:\n                value += 1\n\n        return value\n\n    def hit(self):\n        \"\"\"\u0412\u0437\u044f\u0442\u044c \u043a\u0430\u0440\u0442\u0443\"\"\"\n        if not self.game_over:\n            self.player_hand.append(self.deck.pop())\n            player_value = self.get_hand_value(self.player_hand)\n\n            if player_value &gt; 21:\n                self.game_over = True\n                self.result = \"\ud83d\udca5 \u041f\u0435\u0440\u0435\u0431\u043e\u0440! \u0412\u044b \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value == 21:\n                self.stand()\n\n    def stand(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f\"\"\"\n        if not self.game_over:\n            self.game_over = True\n\n            # \u0414\u0438\u043b\u0435\u0440 \u0431\u0435\u0440\u0435\u0442 \u043a\u0430\u0440\u0442\u044b \u0434\u043e 17\n            while self.get_hand_value(self.dealer_hand) &lt; 17:\n                self.dealer_hand.append(self.deck.pop())\n\n            player_value = self.get_hand_value(self.player_hand)\n            dealer_value = self.get_hand_value(self.dealer_hand)\n\n            if dealer_value &gt; 21:\n                self.result = \"\ud83c\udf89 \u0414\u0438\u043b\u0435\u0440 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u043b! \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &gt; dealer_value:\n                self.result = \"\ud83c\udf89 \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &lt; dealer_value:\n                self.result = \"\ud83d\ude14 \u0414\u0438\u043b\u0435\u0440 \u0432\u044b\u0438\u0433\u0440\u0430\u043b!\"\n            else:\n                self.result = \"\ud83e\udd1d \u041d\u0438\u0447\u044c\u044f!\"\n\n    def get_game_state(self):\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u0433\u0440\u044b\"\"\"\n        player_value = self.get_hand_value(self.player_hand)\n        dealer_value = self.get_hand_value(self.dealer_hand)\n\n        state = f\"\ud83c\udfb0 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a - {self.user_name}\\n\\n\"\n\n        # \u041a\u0430\u0440\u0442\u044b \u0434\u0438\u043b\u0435\u0440\u0430\n        if self.game_over:\n            state += f\ud83c\udccf \u0414\u0438\u043b\u0435\u0440: {' '.join(self.dealer_hand)} = {dealer_value}\\n\"\n        else:\n            state += f\ud83c\udccf \u0414\u0438\u043b\u0435\u0440: {self.dealer_hand[0]} ?\\n\"\n\n        # \u041a\u0430\u0440\u0442\u044b \u0438\u0433\u0440\u043e\u043a\u0430\n        state += f\ud83d\udc64 \u0412\u044b: {' '.join(self.player_hand)} = {player_value}\\n\\n\"\n\n        if self.game_over:\n            state += f\ud83c\udfc1 {self.result}\\n\\n\"\n            state += \"\ud83d\udd04 /start - \u043d\u043e\u0432\u0430\u044f \u0438\u0433\u0440\u0430\"\n        else:\n            state += \"\ud83c\udfaf \u0412\u0430\u0448\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f:\\n\"\n            state += \"\ud83d\udce5 /hit - \u0432\u0437\u044f\u0442\u044c \u043a\u0430\u0440\u0442\u0443\\n\"\n            state += \"\u270b /stand - \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f\"\n\n        return state\n\nclass BlackjackBot:\n    \"\"\"\n    \u0411\u043e\u0442 \u0434\u043b\u044f \u0438\u0433\u0440\u044b \u0432 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a.\n\n    \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442:\n    - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0438\u0433\u0440\u044b (\u043a\u0430\u0440\u0442\u044b, \u0441\u0447\u0435\u0442) \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043b\u0430\u0441\u0441\u0430.\n    - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 `Text` \u0441 `ignore_case=True`.\n    - \u041f\u0440\u043e\u0441\u0442\u0443\u044e \u0438\u0433\u0440\u043e\u0432\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c.\n    \"\"\"\n\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.active_games = {}\n\n    def setup_middleware(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e middleware\"\"\"\n        manager = MiddlewareManager()\n        manager.add_middleware(LoggingMiddleware())\n        manager.add_middleware(ErrorHandlingMiddleware())\n        self.dp.middleware_manager = manager\n\n    def setup_handlers(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\"\"\"\n\n        @self.dp.message_handler(command(\"start\"))\n        async def start_handler(ctx: Context):\n            # \u041d\u0430\u0447\u0430\u043b\u043e \u043d\u043e\u0432\u043e\u0439 \u0438\u0433\u0440\u044b\n            if ctx.user_id in self.active_games:\n                del self.active_games[ctx.user_id]\n\n            game = BlackjackGame(ctx.user_id, ctx.user.name)\n            self.active_games[ctx.user_id] = game\n\n            await ctx.reply(\n                f\"\ud83c\udfb0 \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a, {ctx.user.name}!\\n\\n\"\n                \"\ud83c\udfaf \u0426\u0435\u043b\u044c: \u043d\u0430\u0431\u0440\u0430\u0442\u044c 21 \u043e\u0447\u043a\u043e \u0438\u043b\u0438 \u0431\u043b\u0438\u0436\u0435 \u043a 21, \u0447\u0435\u043c \u0434\u0438\u043b\u0435\u0440\\n\"\n                \"\ud83c\udccf \u0422\u0443\u0437 = 1 \u0438\u043b\u0438 11, \u041a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 = 10\\n\\n\" +\n                game.get_game_state()\n            )\n\n        @self.dp.message_handler(command(\"hit\"))\n        async def hit_handler(ctx: Context):\n            if ctx.user_id in self.active_games:\n                game = self.active_games[ctx.user_id]\n                game.hit()\n                await ctx.reply(game.get_game_state())\n\n                if game.game_over:\n                    del self.active_games[ctx.user_id]\n            else:\n                await ctx.reply(\n                    \"\u274c \u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u0433\u0440\u044b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 /start \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430.\"\n                )\n\n        @self.dp.message_handler(command(\"stand\"))\n        async def stand_handler(ctx: Context):\n            if ctx.user_id in self.active_games:\n                game = self.active_games[ctx.user_id]\n                game.stand()\n                await ctx.reply(game.get_game_state())\n                del self.active_games[ctx.user_id]\n            else:\n                await ctx.reply(\n                    \"\u274c \u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u0433\u0440\u044b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 /start \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430.\"\n                )\n\n        @self.dp.message_handler(command(\"help\"))\n        async def help_handler(ctx: Context):\n            await ctx.reply(\n                \"\ud83d\udcd6 \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a\u0430:\\n\\n\"\n                \"\ud83c\udfaf \u0426\u0435\u043b\u044c: \u043d\u0430\u0431\u0440\u0430\u0442\u044c 21 \u043e\u0447\u043a\u043e \u0438\u043b\u0438 \u0431\u043b\u0438\u0436\u0435 \u043a 21, \u0447\u0435\u043c \u0434\u0438\u043b\u0435\u0440\\n\\n\"\n                \"\ud83c\udccf \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0440\u0442:\\n\"\n                \"\u2022 2-10 = \u043d\u043e\u043c\u0438\u043d\u0430\u043b \u043a\u0430\u0440\u0442\u044b\\n\"\n                \"\u2022 J, Q, K = 10 \u043e\u0447\u043a\u043e\u0432\\n\"\n                \"\u2022 \u0422\u0443\u0437 = 1 \u0438\u043b\u0438 11 (\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435)\\n\\n\"\n                \"\ud83c\udfae \u041a\u043e\u043c\u0430\u043d\u0434\u044b:\\n\"\n                \"\u2022 /start - \u043d\u0430\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0438\u0433\u0440\u0443\\n\"\n                \"\u2022 /hit - \u0432\u0437\u044f\u0442\u044c \u043a\u0430\u0440\u0442\u0443\\n\"\n                \"\u2022 /stand - \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f\\n\"\n                \"\u2022 /help - \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(command(\"stats\"))\n        async def stats_handler(ctx: Context):\n            active_games = len(self.active_games)\n            await ctx.reply(\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\\n\"\n                f\"\ud83c\udfae \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u0433\u0440: {active_games}\\n\"\n                f\"\ud83c\udccf \u041a\u0430\u0440\u0442 \u0432 \u043a\u043e\u043b\u043e\u0434\u0435: {len(CARDS)}\\n\"\n                f\"\ud83d\udc65 \u0418\u0433\u0440\u043e\u043a\u043e\u0432 \u043e\u043d\u043b\u0430\u0439\u043d: {len(set(game.user_id for game in self.active_games.values()))}\\n\\n\"\n                f\"\ud83c\udfaf \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0438\u0433\u0440\u0443: /start\"\n            )\n\n        @self.dp.message_handler(text([\"\u043d\u0430\u0447\u0430\u0442\u044c\", \"\u0438\u0433\u0440\u0430\u0442\u044c\", \"\u0431\u043b\u044d\u043a\u0434\u0436\u0435\u043a\"]))\n        async def start_text_handler(ctx: Context):\n            # \u0410\u043b\u0438\u0430\u0441 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u0433\u0440\u044b\n            if ctx.user_id in self.active_games:\n                del self.active_games[ctx.user_id]\n\n            game = BlackjackGame(ctx.user_id, ctx.user.name)\n            self.active_games[ctx.user_id] = game\n\n            await ctx.reply(\n                f\"\ud83c\udfb0 \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u0433\u0440\u0443, {ctx.user.name}!\\n\\n\" +\n                game.get_game_state()\n            )\n\n        @self.dp.message_handler(text([\"\u043a\u0430\u0440\u0442\u0430\", \"\u0435\u0449\u0435\", \"hit\"]))\n        async def hit_text_handler(ctx: Context):\n            if ctx.user_id in self.active_games:\n                game = self.active_games[ctx.user_id]\n                game.hit()\n                await ctx.reply(game.get_game_state())\n\n                if game.game_over:\n                    del self.active_games[ctx.user_id]\n            else:\n                await ctx.reply(\"\u274c \u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u0433\u0440\u044b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 '\u043d\u0430\u0447\u0430\u0442\u044c' \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430.\")\n\n        @self.dp.message_handler(text([\"\u0441\u0442\u043e\u043f\", \"\u0445\u0432\u0430\u0442\u0438\u0442\", \"stand\"]))\n        async def stand_text_handler(ctx: Context):\n            if ctx.user_id in self.active_games:\n                game = self.active_games[ctx.user_id]\n                game.stand()\n                await ctx.reply(game.get_game_state())\n                del self.active_games[ctx.user_id]\n            else:\n                await ctx.reply(\"\u274c \u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u0433\u0440\u044b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 '\u043d\u0430\u0447\u0430\u0442\u044c' \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430.\")\n\n        @self.dp.message_handler()\n        async def default_handler(ctx: Context):\n            await ctx.reply(\n                \"\ud83e\udd14 \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 /help \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.\"\n            )\n\n    async def run(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430\"\"\"\n        print(\"\ud83c\udfb0 \u0411\u043e\u0442-\u0431\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n\n        async with self.bot:\n            me = await self.bot.get_me()\n            print(f\"\ud83e\udd16 \u0411\u043e\u0442: {me['name']} (ID: {me['user_id']})\")\n\n            await self.bot.polling(\n                dispatcher=self.dp,\n                timeout=1,\n                long_polling_timeout=30\n            )\n\nasync def main():\n    \"\"\"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430\"\"\"\n    if TOKEN == \"YOUR_TOKEN_HERE\":\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b token.txt\n        if os.path.exists(\"token.txt\"):\n            with open(\"token.txt\", \"r\") as f:\n                os.environ[\"MAXBOT_TOKEN\"] = f.read().strip()\n        else:\n            print(\"\ud83d\uded1 \u0422\u043e\u043a\u0435\u043d \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b token.txt \u0438\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f MAXBOT_TOKEN\")\n            return\n\n    bot = BlackjackBot()\n    try:\n        await bot.run()\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\uded1 \u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#3-","title":"3. \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \ud83d\udc54","text":"<p>\u042d\u0442\u043e\u0442 \u0431\u043e\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442: \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u044f\u0432\u043a\u0438, \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u0445 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f. \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u2014 \u0444\u043e\u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 (<code>asyncio.create_task</code>), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u0435 \u043f\u043e\u0440\u0430 \u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435.</p> <pre><code>import asyncio\nimport os\nfrom datetime import datetime\nfrom maxbot import Bot\nfrom maxbot.dispatcher import Dispatcher\nfrom maxbot.filters import command, text, has_attachment\nfrom maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import Context\n\nTOKEN = \"YOUR_TOKEN_HERE\"  # \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u0432\u0430\u0448 \u0442\u043e\u043a\u0435\u043d\n\nclass SecretaryBot:\n    \"\"\"\u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0441 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439\"\"\"\n\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.applications = []\n        self.reminders = {}\n\n    def setup_middleware(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e middleware\"\"\"\n        manager = MiddlewareManager()\n        manager.add_middleware(LoggingMiddleware())\n        manager.add_middleware(ErrorHandlingMiddleware())\n        self.dp.middleware_manager = manager\n\n    def setup_handlers(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\"\"\"\n\n        @self.dp.message_handler(command(\"start\"))\n        async def start_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, {ctx.user.name}! \u042f \u0432\u0430\u0448 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c.\\n\\n\"\n                \"\ud83d\udccb \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\\n\"\n                \"\ud83d\udcdd \u0437\u0430\u044f\u0432\u043a\u0430: [\u0442\u0435\u043a\u0441\u0442] \u2014 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0443\\n\"\n                \"\ud83d\udccb \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a \u2014 \u0432\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\\n\"\n                \"\u23f0 \u043d\u0430\u043f\u043e\u043c\u043d\u0438 \u2014 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435\\n\"\n                \"\ud83d\udcca \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u2014 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0437\u0430\u044f\u0432\u043e\u043a\\n\"\n                \"\u2753 \u043f\u043e\u043c\u043e\u0449\u044c \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(text([\"\u043f\u0440\u0438\u0432\u0435\u0442\", \"\u0437\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\", \"\u0434\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c\", \"\u0434\u043e\u0431\u0440\u043e\u0435 \u0443\u0442\u0440\u043e\", \"\u0434\u043e\u0431\u0440\u044b\u0439 \u0432\u0435\u0447\u0435\u0440\"]))\n        async def greeting_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, {ctx.user.name}! \u042f \u0432\u0430\u0448 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c.\\n\\n\"\n                \"\ud83d\udccb \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\\n\"\n                \"\ud83d\udcdd \u0437\u0430\u044f\u0432\u043a\u0430: [\u0442\u0435\u043a\u0441\u0442] \u2014 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0443\\n\"\n                \"\ud83d\udccb \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a \u2014 \u0432\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\\n\"\n                \"\u23f0 \u043d\u0430\u043f\u043e\u043c\u043d\u0438 \u2014 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435\\n\"\n                \"\ud83d\udcca \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u2014 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0437\u0430\u044f\u0432\u043e\u043a\\n\"\n                \"\u2753 \u043f\u043e\u043c\u043e\u0449\u044c \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(text(\"\u043f\u043e\u043c\u043e\u0449\u044c\"))\n        async def help_handler(ctx: Context):\n            await ctx.reply(\n                \"\u2753 \u041f\u043e\u043c\u043e\u0449\u044c \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c:\\n\\n\"\n                \"\ud83d\udcdd \u0437\u0430\u044f\u0432\u043a\u0430: [\u0442\u0435\u043a\u0441\u0442] \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u044f\u0432\u043a\u0443\\n\"\n                \"\ud83d\udccb \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\\n\"\n                \"\u23f0 \u043d\u0430\u043f\u043e\u043c\u043d\u0438 \u2014 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435\\n\"\n                \"\ud83d\udcca \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\\n\"\n                \"\u2753 \u043f\u043e\u043c\u043e\u0449\u044c \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\\n\\n\"\n                \"\ud83d\udca1 \u041f\u0440\u0438\u043c\u0435\u0440: \u0437\u0430\u044f\u0432\u043a\u0430: \u041d\u0443\u0436\u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443\"\n            )\n\n        @self.dp.message_handler(text(\"\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\"))\n        async def stats_handler(ctx: Context):\n            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]\n            total_apps = len(self.applications)\n\n            await ctx.reply(\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\\n\"\n                f\"\ud83d\udccb \u0412\u0441\u0435\u0433\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435: {total_apps}\\n\"\n                f\"\ud83d\udc64 \u0412\u0430\u0448\u0438\u0445 \u0437\u0430\u044f\u0432\u043e\u043a: {len(user_apps)}\\n\"\n                f\"\ud83d\udcdd \u041d\u043e\u0432\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a: {len([a for a in user_apps if a['status'] == '\ud83d\udcdd \u041d\u043e\u0432\u0430\u044f'])}\\n\"\n                f\"\u23f0 \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439: {len(self.reminders)}\"\n            )\n\n        @self.dp.message_handler(text(\"\u043d\u0430\u043f\u043e\u043c\u043d\u0438\"))\n        async def reminder_handler(ctx: Context):\n            self.reminders[ctx.user_id] = datetime.now()\n            await ctx.reply(\n                \"\u23f0 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\\n\"\n                \"\ud83d\udd14 \u042f \u043d\u0430\u043f\u043e\u043c\u043d\u044e \u0432\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 \u0447\u0430\u0441.\"\n            )\n\n        @self.dp.message_handler(text(\"\u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a\"))\n        async def list_applications_handler(ctx: Context):\n            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]\n\n            if user_apps:\n                apps_text = \"\ud83d\udccb \u0412\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438:\\n\\n\"\n                for app in user_apps[-5:]:  # \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5\n                    apps_text += f\"\ud83d\udd38 #{app['id']} ({app['date']})\\n\"\n                    apps_text += f\"   {app['status']} {app['category']}\\n\"\n                    apps_text += f\"   \ud83d\udcdd {app['text'][:50]}{'...' if len(app['text']) &gt; 50 else ''}\\n\\n\"\n                await ctx.reply(apps_text)\n            else:\n                await ctx.reply(\"\ud83d\udced \u0423 \u0432\u0430\u0441 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u0437\u0430\u044f\u0432\u043e\u043a.\")\n\n        @self.dp.message_handler(has_attachment(True))\n        async def attachment_handler(ctx: Context):\n            \"\"\"\n            \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n            \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 `has_attachment`.\n            \"\"\"\n            attachment_types = [att.type for att in ctx.attachments]\n            await ctx.reply(f\"\u0412\u0438\u0436\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f! \u0422\u0438\u043f\u044b: {', '.join(attachment_types)}. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u044e \u0432 \u0430\u0440\u0445\u0438\u0432.\")\n            print(f\"User {ctx.user_id} sent attachments: {attachment_types}\")\n\n        @self.dp.message_handler()\n        async def no_attachment_handler(ctx: Context):\n            \"\"\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439.\"\"\"\n            await ctx.reply(\"\u042d\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u044f \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e.\")\n\n        @self.dp.message_handler()\n        async def application_handler(ctx: Context):\n            if ctx.text.startswith(\"\u0437\u0430\u044f\u0432\u043a\u0430:\"):\n                application_text = ctx.text[7:].strip()\n                if application_text:\n                    app = {\n                        \"id\": len(self.applications) + 1,\n                        \"user_id\": ctx.user_id,\n                        \"user_name\": ctx.user.name,\n                        \"text\": application_text,\n                        \"status\": \"\ud83d\udcdd \u041d\u043e\u0432\u0430\u044f\",\n                        \"date\": datetime.now().strftime(\"%d.%m.%Y %H:%M\"),\n                        \"category\": \"\ud83d\udcc4 \u041e\u0431\u0449\u0430\u044f\"\n                    }\n                    self.applications.append(app)\n                    await ctx.reply(\n                        f\"\u2705 \u0417\u0430\u044f\u0432\u043a\u0430 #{app['id']} \u043f\u0440\u0438\u043d\u044f\u0442\u0430!\\n\"\n                        f\"\ud83d\udcdd \u0422\u0435\u043a\u0441\u0442: {application_text}\\n\"\n                        f\"\ud83d\udcc5 \u0414\u0430\u0442\u0430: {app['date']}\\n\"\n                        f\"\ud83d\udcca \u0412\u0441\u0435\u0433\u043e \u0437\u0430\u044f\u0432\u043e\u043a: {len(self.applications)}\"\n                    )\n                else:\n                    await ctx.reply(\"\u274c \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u044f\u0432\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u044f.\")\n            else:\n                await ctx.reply(\n                    \"\ud83e\udd14 \u041d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 '\u043f\u043e\u043c\u043e\u0449\u044c' \u0434\u043b\u044f \u0441\u043f\u0440\u0430\u0432\u043a\u0438.\"\n                )\n\n    async def check_reminders(self):\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439\"\"\"\n        current_time = datetime.now()\n        for user_id, reminder_time in list(self.reminders.items()):\n            if (current_time - reminder_time).seconds &gt; 3600:  # \u0427\u0435\u0440\u0435\u0437 \u0447\u0430\u0441\n                await self.bot.send_message(\n                    \"\ud83d\udd14 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435!\\n\"\n                    \"\ud83d\udccb \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u0430\u044f\u0432\u043a\u0438.\",\n                    user_id=user_id\n                )\n                del self.reminders[user_id]\n\n    async def run(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430\"\"\"\n        print(\"\ud83d\udc54 \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n\n        async with self.bot:\n            me = await self.bot.get_me()\n            print(f\"\ud83e\udd16 \u0411\u043e\u0442: {me['name']} (ID: {me['user_id']})\")\n\n            # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0432 \u0444\u043e\u043d\u0435\n            asyncio.create_task(self.reminder_loop())\n\n            await self.bot.polling(\n                dispatcher=self.dp,\n                timeout=1,\n                long_polling_timeout=30\n            )\n\n    async def reminder_loop(self):\n        \"\"\"\u0426\u0438\u043a\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439\"\"\"\n        while True:\n            await self.check_reminders()\n            await asyncio.sleep(60)  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0438\u043d\u0443\u0442\u0443\n\nasync def main():\n    bot = SecretaryBot()\n    try:\n        await bot.run()\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\uded1 \u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples2/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0431\u043e\u0442\u043e\u0432, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 AsyncMaxBot SDK. \u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u044f\u0442\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p>"},{"location":"examples2/#1-","title":"1. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u042d\u0445\u043e-\u0431\u043e\u0442 \ud83e\udd16","text":"<p>\u042d\u0442\u043e\u0442 \u0431\u043e\u0442 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439, \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u043e\u0439 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u043c\u0438 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438. \u041e\u043d \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0431\u043e\u0442\u0430 \u043d\u0430 <code>asyncmaxbot</code>.</p> <pre><code>import asyncio\nimport os\nfrom maxbot import Bot\nfrom maxbot.dispatcher import Dispatcher\nfrom maxbot.filters import command, text\nfrom maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import Context\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\ndef get_token():\n    token_file = \"token.txt\"\n    if os.path.exists(token_file):\n        with open(token_file, 'r') as f:\n            return f.read().strip()\n    return os.environ.get(\"MAXBOT_TOKEN\", \"YOUR_TOKEN_HERE\")\n\nTOKEN = get_token()\n\nclass EchoBot:\n    \"\"\"\u042d\u0445\u043e-\u0431\u043e\u0442 \u0441 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439\"\"\"\n\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.stats = {\"messages\": 0, \"users\": set()}\n\n    def setup_middleware(self):\n        manager = MiddlewareManager()\n        manager.add_middleware(LoggingMiddleware())\n        manager.add_middleware(ErrorHandlingMiddleware())\n        self.dp.middleware_manager = manager\n\n    def setup_handlers(self):\n        @self.dp.message_handler(command(\"start\"))\n        async def start_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u044d\u0445\u043e-\u0431\u043e\u0442.\\n\"\n                \"\ud83d\udcdd \u041f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c, \u0438 \u044f \u043f\u043e\u0432\u0442\u043e\u0440\u044e \u044d\u0442\u043e.\\n\"\n                \"\ud83d\udcca /stats \u2014 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\\n\"\n                \"\ud83d\udd04 /echo \u2014 \u0440\u0435\u0436\u0438\u043c \u044d\u0445\u043e\\n\"\n                \"\u2753 /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(command(\"help\"))\n        async def help_handler(ctx: Context):\n            await ctx.reply(\n                \"\ud83d\udcda \u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u044d\u0445\u043e-\u0431\u043e\u0442\u0443:\\n\\n\"\n                \"\ud83d\udcac \u041f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u044f \u0435\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044e\\n\"\n                \"\ud83d\udcca /stats \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\\n\"\n                \"\ud83d\udd04 /echo \u2014 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u044d\u0445\u043e\\n\"\n                \"\u2753 /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(command(\"stats\"))\n        async def stats_handler(ctx: Context):\n            self.stats[\"messages\"] += 1\n            self.stats[\"users\"].add(ctx.user_id)\n\n            await ctx.reply(\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\"\n                f\"\ud83d\udcac \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: {self.stats['messages']}\\n\"\n                f\"\ud83d\udc65 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: {len(self.stats['users'])}\"\n            )\n\n        @self.dp.message_handler()\n        async def echo_handler(ctx: Context):\n            self.stats[\"messages\"] += 1\n            self.stats[\"users\"].add(ctx.user_id)\n\n            if ctx.text.startswith(\"/\"):\n                await ctx.reply(\"\u2753 \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u041d\u0430\u043f\u0438\u0448\u0438 /help\")\n            else:\n                emoji = \"\ud83e\udd9c\" if \"\u043f\u0440\u0438\u0432\u0435\u0442\" in ctx.text.lower() else \"\ud83d\udce2\"\n                await ctx.reply(f\"{emoji} {ctx.text}\")\n\n    async def run(self):\n        print(\"\ud83e\udd16 \u042d\u0445\u043e-\u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        async with self.bot:\n            me = await self.bot.get_me()\n            print(f\"\ud83e\udd16 \u0411\u043e\u0442: {me['name']} (ID: {me['user_id']})\")\n            await self.bot.polling(dispatcher=self.dp)\n\nasync def main():\n    bot = EchoBot()\n    try:\n        await bot.run()\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\uded1 \u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples2/#2","title":"2. \u0411\u043e\u0442 \u0434\u043b\u044f \u0438\u0433\u0440\u044b \u0432 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \ud83c\udfb0","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430 \u0441\u0432\u043e\u044f \u043a\u043e\u043b\u043e\u0434\u0430, \u0440\u0443\u043a\u0430 \u0438 \u0441\u0447\u0435\u0442. \u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432 \u0441 \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u043a\u043e\u0439.</p> \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0434 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a-\u0431\u043e\u0442\u0430 <pre><code>import asyncio\nimport os\nimport random\nfrom maxbot import Bot\nfrom maxbot.dispatcher import Dispatcher\nfrom maxbot.filters import command, text\nfrom maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import Context\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\nCARDS = {\n    '2\u2660': 2, '3\u2660': 3, '4\u2660': 4, '5\u2660': 5, '6\u2660': 6, '7\u2660': 7, '8\u2660': 8, '9\u2660': 9, '10\u2660': 10, 'J\u2660': 10, 'Q\u2660': 10, 'K\u2660': 10, 'A\u2660': 11,\n    '2\u2663': 2, '3\u2663': 3, '4\u2663': 4, '5\u2663': 5, '6\u2663': 6, '7\u2663': 7, '8\u2663': 8, '9\u2663': 9, '10\u2663': 10, 'J\u2663': 10, 'Q\u2663': 10, 'K\u2663': 10, 'A\u2663': 11,\n    '2\u2665': 2, '3\u2665': 3, '4\u2665': 4, '5\u2665': 5, '6\u2665': 6, '7\u2665': 7, '8\u2665': 8, '9\u2665': 9, '10\u2665': 10, 'J\u2665': 10, 'Q\u2665': 10, 'K\u2665': 10, 'A\u2665': 11,\n    '2\u2666': 2, '3\u2666': 3, '4\u2666': 4, '5\u2666': 5, '6\u2666': 6, '7\u2666': 7, '8\u2666': 8, '9\u2666': 9, '10\u2666': 10, 'J\u2666': 10, 'Q\u2666': 10, 'K\u2666': 10, 'A\u2666': 11\n}\n\nclass BlackjackGame:\n    def __init__(self, user_id, user_name):\n        self.user_id = user_id\n        self.user_name = user_name\n        self.deck = list(CARDS.keys())\n        random.shuffle(self.deck)\n        self.player_hand = []\n        self.dealer_hand = []\n        self.game_over = False\n        self.result = \"\"\n\n        self.player_hand.append(self.deck.pop())\n        self.dealer_hand.append(self.deck.pop())\n        self.player_hand.append(self.deck.pop())\n        self.dealer_hand.append(self.deck.pop())\n\n    def get_hand_value(self, hand):\n        value = 0\n        aces = 0\n        for card in hand:\n            card_value = CARDS[card]\n            if card_value == 11:\n                aces += 1\n            else:\n                value += card_value\n        for _ in range(aces):\n            if value + 11 &lt;= 21:\n                value += 11\n            else:\n                value += 1\n        return value\n\n    def hit(self):\n        if not self.game_over:\n            self.player_hand.append(self.deck.pop())\n            player_value = self.get_hand_value(self.player_hand)\n            if player_value &gt; 21:\n                self.game_over = True\n                self.result = \"\ud83d\udca5 \u041f\u0435\u0440\u0435\u0431\u043e\u0440! \u0412\u044b \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value == 21:\n                self.stand()\n\n    def stand(self):\n        if not self.game_over:\n            self.game_over = True\n            while self.get_hand_value(self.dealer_hand) &lt; 17:\n                self.dealer_hand.append(self.deck.pop())\n            player_value = self.get_hand_value(self.player_hand)\n            dealer_value = self.get_hand_value(self.dealer_hand)\n            if dealer_value &gt; 21:\n                self.result = \"\ud83c\udf89 \u0414\u0438\u043b\u0435\u0440 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u043b! \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &gt; dealer_value:\n                self.result = \"\ud83c\udf89 \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &lt; dealer_value:\n                self.result = \"\ud83d\ude14 \u0414\u0438\u043b\u0435\u0440 \u0432\u044b\u0438\u0433\u0440\u0430\u043b!\"\n            else:\n                self.result = \"\ud83e\udd1d \u041d\u0438\u0447\u044c\u044f!\"\n\n    def get_game_state(self):\n        player_value = self.get_hand_value(self.player_hand)\n        dealer_value = self.get_hand_value(self.dealer_hand)\n        state = f\"\ud83c\udfb0 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a - {self.user_name}\\n\\n\"\n        if self.game_over:\n            state += f\"\ud83c\udccf \u0414\u0438\u043b\u0435\u0440: {' '.join(self.dealer_hand)} = {dealer_value}\\n\"\n        else:\n            state += f\"\ud83c\udccf \u0414\u0438\u043b\u0435\u0440: {self.dealer_hand[0]} ?\\n\"\n        state += f\"\ud83d\udc64 \u0412\u044b: {' '.join(self.player_hand)} = {player_value}\\n\\n\"\n        if self.game_over:\n            state += f\"\ud83c\udfc1 {self.result}\\n\\n\"\n            state += \"\ud83d\udd04 /start - \u043d\u043e\u0432\u0430\u044f \u0438\u0433\u0440\u0430\"\n        else:\n            state += \"\ud83c\udfaf \u0412\u0430\u0448\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f:\\n\ud83d\udce5 /hit - \u0432\u0437\u044f\u0442\u044c \u043a\u0430\u0440\u0442\u0443\\n\u270b /stand - \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f\"\n        return state\n\nclass BlackjackBot:\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.active_games = {}\n\n    def setup_middleware(self):\n        manager = MiddlewareManager()\n        manager.add_middleware(LoggingMiddleware())\n        manager.add_middleware(ErrorHandlingMiddleware())\n        self.dp.middleware_manager = manager\n\n    def setup_handlers(self):\n        @self.dp.message_handler(command(\"start\"))\n        async def start_handler(ctx: Context):\n            if ctx.user_id in self.active_games:\n                del self.active_games[ctx.user_id]\n            game = BlackjackGame(ctx.user_id, ctx.user.name)\n            self.active_games[ctx.user_id] = game\n            await ctx.reply(f\"\ud83c\udfb0 \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a, {ctx.user.name}!\\n\\n\" + game.get_game_state())\n\n        @self.dp.message_handler(command(\"hit\"))\n        async def hit_handler(ctx: Context):\n            if ctx.user_id in self.active_games:\n                game = self.active_games[ctx.user_id]\n                game.hit()\n                await ctx.reply(game.get_game_state())\n                if game.game_over:\n                    del self.active_games[ctx.user_id]\n            else:\n                await ctx.reply(\"\u274c \u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u0433\u0440\u044b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 /start \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430.\")\n\n        @self.dp.message_handler(command(\"stand\"))\n        async def stand_handler(ctx: Context):\n            if ctx.user_id in self.active_games:\n                game = self.active_games[ctx.user_id]\n                game.stand()\n                await ctx.reply(game.get_game_state())\n                del self.active_games[ctx.user_id]\n            else:\n                await ctx.reply(\"\u274c \u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u0433\u0440\u044b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 /start \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430.\")\n\n    async def run(self):\n        print(\"\ud83c\udfb0 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a-\u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        async with self.bot:\n            await self.bot.polling(dispatcher=self.dp)\n\nasync def main():\n    bot = BlackjackBot()\n    await bot.run()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples2/#3-","title":"3. \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \ud83d\udc54","text":"<p>\u042d\u0442\u043e\u0442 \u0431\u043e\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442: \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u044f\u0432\u043a\u0438, \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u0445 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f. \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u2014 \u0444\u043e\u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 (<code>asyncio.create_task</code>), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u0435 \u043f\u043e\u0440\u0430 \u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435.</p> \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0434 \u0411\u043e\u0442\u0430-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044f <pre><code>import asyncio\nimport os\nfrom datetime import datetime\nfrom maxbot import Bot\nfrom maxbot.dispatcher import Dispatcher\nfrom maxbot.filters import command, text, has_attachment\nfrom maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import Context\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\nclass SecretaryBot:\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.applications = []\n        self.reminders = {}\n\n    def setup_middleware(self):\n        manager = MiddlewareManager()\n        manager.add_middleware(LoggingMiddleware())\n        manager.add_middleware(ErrorHandlingMiddleware())\n        self.dp.middleware_manager = manager\n\n    def setup_handlers(self):\n        @self.dp.message_handler(command(\"start\"))\n        async def start_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, {ctx.user.name}! \u042f \u0432\u0430\u0448 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c.\\n\\n\"\n                \"\ud83d\udccb \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\\n\"\n                \"\ud83d\udcdd \u0437\u0430\u044f\u0432\u043a\u0430: [\u0442\u0435\u043a\u0441\u0442] \u2014 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0443\\n\"\n                \"\ud83d\udccb \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a \u2014 \u0432\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\\n\"\n                \"\u23f0 \u043d\u0430\u043f\u043e\u043c\u043d\u0438 \u2014 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435\\n\"\n                \"\u2753 \u043f\u043e\u043c\u043e\u0449\u044c \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(text(\"\u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a\"))\n        async def list_applications_handler(ctx: Context):\n            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]\n            if user_apps:\n                apps_text = \"\ud83d\udccb \u0412\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438:\\n\\n\"\n                for app in user_apps[-5:]:\n                    apps_text += f\"\ud83d\udd38 #{app['id']} ({app['date']}) - {app['status']}\\n\"\n                    apps_text += f\"   \ud83d\udcdd {app['text'][:50]}...\\n\\n\"\n                await ctx.reply(apps_text)\n            else:\n                await ctx.reply(\"\ud83d\udced \u0423 \u0432\u0430\u0441 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u0437\u0430\u044f\u0432\u043e\u043a.\")\n\n        @self.dp.message_handler(text(\"\u043d\u0430\u043f\u043e\u043c\u043d\u0438\"))\n        async def reminder_handler(ctx: Context):\n            self.reminders[ctx.user_id] = datetime.now()\n            await ctx.reply(\n                \"\u23f0 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\\n\"\n                \"\ud83d\udd14 \u042f \u043d\u0430\u043f\u043e\u043c\u043d\u044e \u0432\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 \u0447\u0430\u0441.\"\n            )\n\n        @self.dp.message_handler()\n        async def application_handler(ctx: Context):\n            if ctx.text.startswith(\"\u0437\u0430\u044f\u0432\u043a\u0430:\"):\n                application_text = ctx.text[7:].strip()\n                if application_text:\n                    app = {\n                        \"id\": len(self.applications) + 1,\n                        \"user_id\": ctx.user_id, \"user_name\": ctx.user.name,\n                        \"text\": application_text, \"status\": \"\ud83d\udcdd \u041d\u043e\u0432\u0430\u044f\",\n                        \"date\": datetime.now().strftime(\"%d.%m.%Y %H:%M\"),\n                    }\n                    self.applications.append(app)\n                    await ctx.reply(f\"\u2705 \u0417\u0430\u044f\u0432\u043a\u0430 #{app['id']} \u043f\u0440\u0438\u043d\u044f\u0442\u0430!\")\n                else:\n                    await ctx.reply(\"\u274c \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u044f\u0432\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u044f.\")\n            else:\n                await ctx.reply(\"\ud83e\udd14 \u041d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 '\u043f\u043e\u043c\u043e\u0449\u044c' \u0434\u043b\u044f \u0441\u043f\u0440\u0430\u0432\u043a\u0438.\")\n\n    async def check_reminders(self):\n        current_time = datetime.now()\n        for user_id, reminder_time in list(self.reminders.items()):\n            if (current_time - reminder_time).seconds &gt; 3600:\n                await self.bot.send_message(\n                    \"\ud83d\udd14 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435! \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u0430\u044f\u0432\u043a\u0438.\",\n                    user_id=user_id\n                )\n                del self.reminders[user_id]\n\n    async def reminder_loop(self):\n        while True:\n            await self.check_reminders()\n            await asyncio.sleep(60)\n\n    async def run(self):\n        print(\"\ud83d\udc54 \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        async with self.bot:\n            asyncio.create_task(self.reminder_loop())\n            await self.bot.polling(dispatcher=self.dp)\n\nasync def main():\n    bot = SecretaryBot()\n    await bot.run()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"}]}