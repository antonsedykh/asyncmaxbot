{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":""},{"location":"#asyncmaxbot-sdk","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 AsyncMaxBot SDK!","text":"<p>\u042d\u0442\u043e \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e AsyncMaxBot, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 Python-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432 \u0432 Max Messenger.</p> <p>\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0432\u0441\u0451 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u043e\u0442\u043e\u0432 \u043b\u044e\u0431\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438: \u043e\u0442 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u044d\u0445\u043e-\u0431\u043e\u0442\u043e\u0432 \u0434\u043e \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0441 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439, inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 \u0438 callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439.</p>"},{"location":"#_1","title":"\ud83d\ude80 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u0412\u043e\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 <code>/start</code> \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u043b\u044e\u0431\u043e\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0431\u043e\u0447\u0438\u0439.</p> <pre><code>import asyncio\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\n\n# \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\nTOKEN = \"YOUR_TOKEN_HERE\"\n\nasync def main():\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c 'async with' \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0435\u0439\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b /start \u0441 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439\n        @dp.message_handler(F.command == \"start\")\n        async def handle_start(ctx: Context):\n            keyboard = InlineKeyboardMarkup(\n                inline_keyboard=[\n                    [InlineKeyboardButton(text=\"\ud83c\udfae \u0418\u0433\u0440\u0430\u0442\u044c\", payload=\"play\")],\n                    [InlineKeyboardButton(text=\"\u2139\ufe0f \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")]\n                ]\n            )\n            await ctx.reply(f\"\u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\", reply_markup=keyboard)\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a callback \u043a\u043d\u043e\u043f\u043e\u043a\n        @dp.callback_query_handler(F.payload == \"play\")\n        async def handle_play_callback(ctx: Context):\n            await ctx.answer_callback(\"\ud83c\udfae \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u0433\u0440\u0443!\")\n            await ctx.edit_message(\"\u0418\u0433\u0440\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c! \ud83c\udfb2\")\n\n        @dp.callback_query_handler(F.payload == \"help\")\n        async def handle_help_callback(ctx: Context):\n            await ctx.answer_callback(\"\u2139\ufe0f \u0421\u043f\u0440\u0430\u0432\u043a\u0430\")\n            await ctx.edit_message(\"\u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0431\u043e\u0442 \u0441 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439!\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n        @dp.message_handler()\n        async def handle_echo(ctx: Context):\n            if ctx.text:\n                await ctx.reply(f\"\u0412\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438: {ctx.text}\")\n\n        # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439\n        print(\"\u0411\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d...\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    try:\n        asyncio.run(main())\n    except KeyboardInterrupt:\n        print(\"\u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d.\")\n</code></pre>"},{"location":"#_2","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c:","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: <code>pip install asyncmaxbot</code></li> <li>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u043a\u043e\u0434 \u0432 \u0444\u0430\u0439\u043b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>my_bot.py</code>.</li> <li>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>\"YOUR_TOKEN_HERE\"</code> \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u043e\u0442\u0430.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e: <code>python my_bot.py</code></li> </ol>"},{"location":"#_3","title":"\u2728 \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"#magicfilter-f","title":"\ud83c\udfaf MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (F)","text":"<p>\u0413\u0438\u0431\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439: <pre><code>@dp.message_handler(F.text.contains(\"\u043f\u0440\u0438\u0432\u0435\u0442\") &amp; F.user_id == 123)\n@dp.message_handler(F.command == \"start\" | F.text.startswith(\"help\"))\n@dp.message_handler(F.has_attachments == True)\n</code></pre></p>"},{"location":"#inline-callback","title":"\ud83c\udfae Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 callback","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043d\u043e\u043f\u043e\u043a \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0430\u0436\u0430\u0442\u0438\u0439: <pre><code>keyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [InlineKeyboardButton(text=\"\u041a\u043d\u043e\u043f\u043a\u0430\", payload=\"action\")]\n    ]\n)\n\n@dp.callback_query_handler(F.payload == \"action\")\nasync def handle_callback(ctx: Context):\n    await ctx.answer_callback(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e!\")\n</code></pre></p>"},{"location":"#_4","title":"\ud83d\udcce \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438","text":"<p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0444\u0430\u0439\u043b\u043e\u0432: \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0432\u0438\u0434\u0435\u043e, \u0430\u0443\u0434\u0438\u043e, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b: <pre><code>@dp.message_handler(F.attachment.type == \"image\")\nasync def handle_photo(ctx: Context):\n    for attachment in ctx.attachments:\n        await ctx.reply(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435: {attachment.filename}\")\n</code></pre></p>"},{"location":"#middleware","title":"\ud83d\udd27 Middleware \u0441\u0438\u0441\u0442\u0435\u043c\u0430","text":"<p>\u0421\u043a\u0432\u043e\u0437\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439: <pre><code>from maxbot.middleware import LoggingMiddleware, ThrottlingMiddleware\n\ndp.include_middleware(LoggingMiddleware())\ndp.include_middleware(ThrottlingMiddleware(rate_limit=1.0))\n</code></pre></p>"},{"location":"#_5","title":"\ud83c\udfb2 \u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<p>\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0433\u0440 (\u0431\u043b\u044d\u043a\u0434\u0436\u0435\u043a, \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c) \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c.</p>"},{"location":"#_6","title":"\ud83d\udcda \u041a\u0443\u0434\u0430 \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435?","text":"<ul> <li>\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API: \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0441\u044e\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0433\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 SDK.</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430: \u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \"\u0436\u0438\u0432\u044b\u043c\u0438\" \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043a\u043e\u0434\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0433\u0440\u044b \u0438 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438.</li> <li>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 PyPI: \u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u0445.</li> </ul>"},{"location":"#141","title":"\ud83d\udd04 \u0412\u0435\u0440\u0441\u0438\u044f 1.4.1","text":"<p>\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442:  - \u2705 Router-\u0441\u0438\u0441\u0442\u0435\u043c\u0430: \u0434\u043b\u044f \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b. - \u2705 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u0442\u0430\u0440\u0442\u0430 \u0431\u043e\u0442\u0430 \u0438 \u0434\u0440. - \u2705 MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0433\u0438\u0431\u043a\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 - \u2705 Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 - \u2705 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 - \u2705 Middleware \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 - \u2705 \u041f\u043e\u043b\u043d\u0443\u044e \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e \u0441 Pydantic - \u2705 \u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438 \u0442\u0435\u0441\u0442\u044b</p>"},{"location":"api/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API AsyncMaxBot SDK","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u2014 \u0432\u0430\u0448 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c, \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u0438 \u0442\u0438\u043f\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445 AsyncMaxBot SDK \u0432\u0435\u0440\u0441\u0438\u0438 1.4.0, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u0434\u0435.</p>"},{"location":"api/#1","title":"1. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0438 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>graph TD\n    A[\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\"] --&gt; B[\"Max API\"]\n    B --&gt; C{\"bot.polling\"}\n    C --\"JSON-\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\"--&gt; D[\"Dispatcher\"]\n    D --\"\u041f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432 MiddlewareManager\"--&gt; E[\"MiddlewareManager\"]\n    E --\"\u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442 Middleware\"--&gt; F[\"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432 Pydantic-\u043c\u043e\u0434\u0435\u043b\u0438\"]\n    F --\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 Context\"--&gt; G[\"Context\"]\n    G --\"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u044b\"--&gt; H{\"\u0424\u0438\u043b\u044c\u0442\u0440\u044b: F, command, text, ...\"}\n    H --\"\u0414\u0410\"--&gt; I[\"\u0412\u044b\u0437\u043e\u0432 \u0432\u0430\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\"]\n    I --\"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Context \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430\"--&gt; J[\"ctx reply\"]\n    J --\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 Bot\"--&gt; K[\"Bot send_message\"]\n    K --\"HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\"--&gt; B\n    B --&gt; L[\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\"]\n    H --\"\u041d\u0415\u0422\"--&gt; M[\"\u041f\u043e\u0438\u0441\u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\"]\n</code></pre> <p>\u041f\u043e\u0442\u043e\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438: 1. <code>bot.polling(dispatcher=dp)</code> \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 Max API \u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f 2. <code>Dispatcher</code> \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 <code>MiddlewareManager</code> 3. Middleware \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435 4. \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0441\u044f\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u0433\u043e \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 Pydantic-\u043c\u043e\u0434\u0435\u043b\u0438 5. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Context</code> 6. <code>Dispatcher</code> \u0438\u0449\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0435\u0433\u043e <code>\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c</code> 7. \u0415\u0441\u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u044b, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0430\u0448\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 <code>Context</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430</p>"},{"location":"api/#2-bot","title":"2. \u041a\u043b\u0430\u0441\u0441 <code>Bot</code>","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Max API. \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440.</p>"},{"location":"api/#_1","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u043a","text":"<pre><code>from maxbot import Bot, Dispatcher\n\nasync with Bot(token=TOKEN) as bot:\n    dp = Dispatcher(bot)\n    # ... \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 ...\n    await bot.polling(dispatcher=dp)\n</code></pre>"},{"location":"api/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","text":""},{"location":"api/#_3","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u043e\u0442\u0435","text":"<ul> <li><code>get_me()</code> -&gt; <code>Dict[str, Any]</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u0442\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f</li> </ul>"},{"location":"api/#_4","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<ul> <li><code>send_message(text: str, user_id: Optional[int] = None, chat_id: Optional[int] = None, reply_markup: Optional[Any] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e: \u043b\u0438\u0431\u043e <code>user_id</code>, \u043b\u0438\u0431\u043e <code>chat_id</code></li> <li><code>reply_markup</code>: \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440</li> <li><code>edit_message(message_id: str, text: str, reply_markup: Optional[Any] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>delete_message(message_id: str)</code> -&gt; <code>Dict[str, Any]</code>: \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> </ul>"},{"location":"api/#_5","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438","text":"<ul> <li><code>upload_image(file: Union[str, BinaryIO, bytes], **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435</li> <li><code>upload_video(file: Union[str, BinaryIO, bytes], **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0438\u0434\u0435\u043e</li> <li><code>upload_audio(file: Union[str, BinaryIO, bytes], **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0430\u0443\u0434\u0438\u043e</li> <li><code>upload_file(file: Union[str, BinaryIO, bytes], **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b</li> <li><code>upload_sticker(file: Union[str, BinaryIO, bytes], **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0441\u0442\u0438\u043a\u0435\u0440</li> <li><code>download_file(file_id: str, save_path: Optional[str] = None)</code> -&gt; <code>Union[bytes, str]</code>: \u0421\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b</li> <li><code>get_file(file_id: str)</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0444\u0430\u0439\u043b\u0435</li> </ul>"},{"location":"api/#_6","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439","text":"<ul> <li><code>send_photo(photo: Union[str, BinaryIO, bytes, Dict], user_id: Optional[int] = None, chat_id: Optional[int] = None, caption: Optional[str] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u043e\u0442\u043e</li> <li><code>send_video(video: Union[str, BinaryIO, bytes, Dict], user_id: Optional[int] = None, chat_id: Optional[int] = None, caption: Optional[str] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0438\u0434\u0435\u043e</li> <li><code>send_audio(audio: Union[str, BinaryIO, bytes, Dict], user_id: Optional[int] = None, chat_id: Optional[int] = None, caption: Optional[str] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u0443\u0434\u0438\u043e</li> <li><code>send_document(document: Union[str, BinaryIO, bytes, Dict], user_id: Optional[int] = None, chat_id: Optional[int] = None, caption: Optional[str] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442</li> </ul>"},{"location":"api/#_7","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0447\u0430\u0442\u0430\u043c\u0438","text":"<ul> <li><code>get_chat(chat_id: int)</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0447\u0430\u0442\u0435</li> <li><code>get_chats(**kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0430\u0442\u043e\u0432</li> <li><code>get_chat_members(chat_id: int, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0430\u0442\u0430</li> <li><code>add_chat_members(chat_id: int, user_ids: List[int])</code> -&gt; <code>Dict[str, Any]</code>: \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u0447\u0430\u0442</li> <li><code>leave_chat(chat_id: int)</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 \u0447\u0430\u0442</li> </ul>"},{"location":"api/#_8","title":"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 \u0447\u0430\u0442\u0435","text":"<ul> <li><code>send_action(chat_id: int, action: str)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 'typing')</li> <li><code>pin_message(chat_id: int, message_id: str, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0417\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>unpin_message(chat_id: int, message_id: str)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> </ul>"},{"location":"api/#callback","title":"Callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<ul> <li><code>answer_callback_query(callback_id: str, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 callback-\u0437\u0430\u043f\u0440\u043e\u0441</li> <li><code>send_callback(callback_query_id: str, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0410\u043b\u0438\u0430\u0441 \u0434\u043b\u044f answer_callback_query</li> </ul>"},{"location":"api/#_9","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432","text":"<ul> <li><code>validate_file_size(file: Union[str, BinaryIO, bytes], max_size_mb: int = 50)</code> -&gt; <code>bool</code>: \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430</li> <li><code>validate_file_format(file: Union[str, BinaryIO, bytes], file_type: str)</code> -&gt; <code>bool</code>: \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u0442 \u0444\u0430\u0439\u043b\u0430</li> <li><code>get_supported_formats(file_type: str)</code> -&gt; <code>List[str]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b</li> </ul>"},{"location":"api/#_10","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439","text":"<ul> <li><code>get_updates(offset: Optional[int] = None, limit: int = 100, timeout: int = 20)</code> -&gt; <code>Dict</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 API</li> <li><code>polling(timeout: int = 1, long_polling_timeout: int = 20, dispatcher: 'Dispatcher' = None)</code>: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430</li> </ul>"},{"location":"api/#3-dispatcher","title":"3. \u041a\u043b\u0430\u0441\u0441 <code>Dispatcher</code>","text":"<p>\u0414\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 middleware \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0443\u0436\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438.</p>"},{"location":"api/#_11","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<pre><code>from maxbot import Dispatcher\n\ndp = Dispatcher(bot)\n</code></pre>"},{"location":"api/#_12","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":""},{"location":"api/#_13","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<ul> <li><code>@dp.message_handler(*filters)</code>: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439</li> </ul>"},{"location":"api/#callback-","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 callback-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":"<ul> <li><code>@dp.callback_query_handler(*filters)</code>: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 callback-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432</li> </ul>"},{"location":"api/#14","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 (\u0432\u0435\u0440\u0441\u0438\u044f 1.4+)","text":"<ul> <li><code>@dp.bot_started_handler(*filters)</code>: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430</li> <li><code>@dp.user_added_handler(*filters)</code>: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442</li> <li><code>@dp.chat_member_updated_handler(*filters)</code>: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430</li> </ul>"},{"location":"api/#middleware","title":"Middleware","text":"<ul> <li><code>dp.include_middleware(middleware)</code>: \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 middleware \u0432 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> <li><code>dp.include_router(router)</code>: \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0440\u043e\u0443\u0442\u0435\u0440 \u043a \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440\u0443</li> </ul>"},{"location":"api/#4-context","title":"4. \u041a\u043b\u0430\u0441\u0441 <code>Context</code>","text":"<p>\u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430.</p>"},{"location":"api/#_14","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":""},{"location":"api/#_15","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0438 \u0447\u0430\u0442\u0435","text":"<ul> <li><code>user: Optional[User]</code>: \u041e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>chat: Optional[Chat]</code>: \u041e\u0431\u044a\u0435\u043a\u0442 \u0447\u0430\u0442\u0430</li> <li><code>user_id: Optional[int]</code>: ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>chat_id: Optional[int]</code>: ID \u0447\u0430\u0442\u0430</li> </ul>"},{"location":"api/#_16","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438","text":"<ul> <li><code>message: Optional[Message]</code>: \u041e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li><code>text: Optional[str]</code>: \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li><code>message_id: Optional[str]</code>: ID \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li><code>date: int</code>: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"api/#_17","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<ul> <li><code>attachments: Optional[List[BaseAttachment]]</code>: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439</li> <li><code>has_attachments: bool</code>: True, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li><code>images: List[BaseAttachment]</code>: \u0421\u043f\u0438\u0441\u043e\u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439</li> </ul>"},{"location":"api/#callback_1","title":"Callback \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f","text":"<ul> <li><code>is_callback: bool</code>: True, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e callback-\u0437\u0430\u043f\u0440\u043e\u0441</li> <li><code>payload: Optional[str]</code>: Payload callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430</li> <li><code>callback_id: Optional[str]</code>: ID callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430</li> </ul>"},{"location":"api/#14_1","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u0432\u0435\u0440\u0441\u0438\u044f 1.4+)","text":"<ul> <li><code>bot_started: Optional[BotStarted]</code>: \u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430</li> <li><code>user_added: Optional[UserAdded]</code>: \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>chat_member_updated: Optional[ChatMemberUpdated]</code>: \u0414\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430</li> </ul>"},{"location":"api/#_18","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","text":""},{"location":"api/#_19","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<ul> <li><code>reply(text: str, reply_markup: Optional[Any] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u0432 \u0442\u043e\u0442 \u0436\u0435 \u0447\u0430\u0442</li> <li><code>answer(text: str, reply_markup: Optional[Any] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u0434\u043b\u044f reply</li> </ul>"},{"location":"api/#_20","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435","text":"<ul> <li><code>edit_message(text: str, reply_markup: Optional[Any] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>delete_message(**kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> </ul>"},{"location":"api/#callback_2","title":"Callback \u043e\u0442\u0432\u0435\u0442\u044b","text":"<ul> <li><code>answer_callback(text: Optional[str] = None, message: Optional[dict] = None, show_alert: bool = False, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 callback</li> </ul>"},{"location":"api/#_21","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0447\u0430\u0442\u043e\u043c","text":"<ul> <li><code>get_members(**kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0430\u0442\u0430</li> <li><code>send_action(action: str)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435</li> <li><code>pin_message(message_id: Optional[str] = None, **kwargs)</code> -&gt; <code>Dict[str, Any]</code>: \u0417\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>unpin_message(message_id: str)</code> -&gt; <code>Dict[str, Any]</code>: \u041e\u0442\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>leave_chat()</code> -&gt; <code>Dict[str, Any]</code>: \u041f\u043e\u043a\u0438\u043d\u0443\u0442\u044c \u0447\u0430\u0442</li> <li><code>add_members(user_ids: List[int])</code> -&gt; <code>Dict[str, Any]</code>: \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432</li> </ul>"},{"location":"api/#5-magicfilter-f","title":"5. MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (F)","text":"<p>MagicFilter \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432 \u0441\u0442\u0438\u043b\u0435, \u043f\u043e\u0445\u043e\u0436\u0435\u043c \u043d\u0430 SQL \u0438\u043b\u0438 ORM.</p>"},{"location":"api/#_22","title":"\u0418\u043c\u043f\u043e\u0440\u0442","text":"<pre><code>from maxbot import F\n</code></pre>"},{"location":"api/#_23","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"api/#_24","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f","text":"<pre><code>@dp.message_handler(F.text == \"\u043f\u0440\u0438\u0432\u0435\u0442\")\n@dp.message_handler(F.user_id == 123)\n@dp.message_handler(F.chat_id != 456)\n@dp.message_handler(F.user_id &gt; 100)\n@dp.message_handler(F.user_id &lt;= 1000)\n</code></pre>"},{"location":"api/#_25","title":"\u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438","text":"<pre><code>@dp.message_handler(F.text.contains(\"hello\"))\n@dp.message_handler(F.text.startswith(\"/\"))\n@dp.message_handler(F.text.endswith(\"!\"))\n</code></pre>"},{"location":"api/#_26","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439","text":"<pre><code>@dp.message_handler(F.user_id.in_([1, 2, 3, 4, 5]))\n@dp.message_handler(F.command.in_([\"start\", \"help\", \"info\"]))\n</code></pre>"},{"location":"api/#_27","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438","text":"<pre><code>@dp.message_handler(F.has_attachments == True)\n@dp.message_handler(F.attachment.type == \"image\")\n@dp.message_handler(F.attachment.type.in_([\"image\", \"video\"]))\n</code></pre>"},{"location":"api/#_28","title":"\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432","text":"<pre><code># AND \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\n@dp.message_handler(F.text.contains(\"admin\") &amp; F.user_id == 123)\n\n# OR \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f  \n@dp.message_handler(F.command == \"start\" | F.text.startswith(\"help\"))\n\n# NOT \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\n@dp.message_handler(~F.text.startswith(\"/\"))\n\n# \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n@dp.message_handler(\n    (F.command == \"start\" | F.text.contains(\"\u043f\u0440\u0438\u0432\u0435\u0442\")) &amp; \n    F.user_id.in_([1, 2, 3])\n)\n</code></pre>"},{"location":"api/#_29","title":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":"<ul> <li><code>F.text</code> - \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li><code>F.command</code> - \u043a\u043e\u043c\u0430\u043d\u0434\u0430 (\u0431\u0435\u0437 /)</li> <li><code>F.user</code> - \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>F.user_id</code> - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>F.chat</code> - \u043e\u0431\u044a\u0435\u043a\u0442 \u0447\u0430\u0442\u0430</li> <li><code>F.chat_id</code> - ID \u0447\u0430\u0442\u0430</li> <li><code>F.message_id</code> - ID \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li><code>F.attachment</code> - \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li><code>F.has_attachments</code> - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439</li> <li><code>F.payload</code> - payload callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f callback)</li> </ul>"},{"location":"api/#6-inline-callback","title":"6. Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 Callback","text":""},{"location":"api/#_30","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440","text":"<pre><code>from maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\n\n# \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\nkeyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [InlineKeyboardButton(text=\"\u041a\u043d\u043e\u043f\u043a\u0430 1\", payload=\"action1\")],\n        [InlineKeyboardButton(text=\"\u041a\u043d\u043e\u043f\u043a\u0430 2\", payload=\"action2\")]\n    ]\n)\n\n# \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0441 URL\nkeyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [InlineKeyboardButton(text=\"\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0441\u0430\u0439\u0442\", url=\"https://example.com\")],\n        [InlineKeyboardButton(text=\"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435\", payload=\"action\")]\n    ]\n)\n\n# \u041c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\nkeyboard = InlineKeyboardMarkup(\n    inline_keyboard=[\n        [\n            InlineKeyboardButton(text=\"\u2b05\ufe0f\", payload=\"prev\"),\n            InlineKeyboardButton(text=\"\u27a1\ufe0f\", payload=\"next\")\n        ],\n        [InlineKeyboardButton(text=\"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\", payload=\"menu\")]\n    ]\n)\n</code></pre>"},{"location":"api/#_31","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439","text":"<pre><code>@dp.message_handler(F.command == \"menu\")\nasync def show_menu(ctx: Context):\n    keyboard = InlineKeyboardMarkup(\n        inline_keyboard=[\n            [InlineKeyboardButton(text=\"\ud83c\udfae \u0418\u0433\u0440\u0430\u0442\u044c\", payload=\"play\")],\n            [InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"stats\")],\n            [InlineKeyboardButton(text=\"\u2139\ufe0f \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")]\n        ]\n    )\n    await ctx.reply(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\", reply_markup=keyboard)\n</code></pre>"},{"location":"api/#callback_3","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 callback","text":"<pre><code>@dp.callback_query_handler(F.payload == \"play\")\nasync def handle_play(ctx: Context):\n    # \u041e\u0442\u0432\u0435\u0447\u0430\u0435\u043c \u043d\u0430 callback (\u0443\u0431\u0438\u0440\u0430\u0435\u043c \"\u0447\u0430\u0441\u0438\u043a\u0438\")\n    await ctx.answer_callback(\"\ud83c\udfae \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u0433\u0440\u0443!\")\n\n    # \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    await ctx.edit_message(\"\u0418\u0433\u0440\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c! \ud83c\udfb2\")\n\n@dp.callback_query_handler(F.payload == \"stats\")\nasync def handle_stats(ctx: Context):\n    await ctx.answer_callback(\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f...\")\n    await ctx.edit_message(\"\u0412\u0430\u0448\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430: 10 \u0438\u0433\u0440, 7 \u043f\u043e\u0431\u0435\u0434\")\n\n@dp.callback_query_handler(F.payload == \"help\")\nasync def handle_help(ctx: Context):\n    # \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c alert\n    await ctx.answer_callback(\"\u042d\u0442\u043e \u0441\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u0438\u0433\u0440\u0435!\", show_alert=True)\n</code></pre>"},{"location":"api/#context-callback","title":"\u041c\u0435\u0442\u043e\u0434\u044b Context \u0434\u043b\u044f callback","text":"<ul> <li><code>ctx.answer_callback(text=None, message=None, show_alert=False, **kwargs)</code>: \u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 callback</li> <li><code>ctx.edit_message(text, reply_markup=None, **kwargs)</code>: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>ctx.payload</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 payload \u043a\u043d\u043e\u043f\u043a\u0438</li> <li><code>ctx.callback_id</code>: ID callback-\u0437\u0430\u043f\u0440\u043e\u0441\u0430</li> </ul>"},{"location":"api/#7-middleware","title":"7. Middleware","text":"<p>Middleware \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u043a\u0432\u043e\u0437\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439.</p>"},{"location":"api/#_32","title":"\u0418\u043c\u043f\u043e\u0440\u0442","text":"<pre><code>from maxbot.middleware import (\n    LoggingMiddleware, \n    ThrottlingMiddleware, \n    ErrorHandlingMiddleware,\n    UserTrackingMiddleware,\n    MetricsMiddleware,\n    AntispamMiddleware,\n    ValidationMiddleware,\n    ProfilingMiddleware\n)\n</code></pre>"},{"location":"api/#_33","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>dp.include_middleware(LoggingMiddleware())\ndp.include_middleware(ThrottlingMiddleware(rate_limit=1.0)) # 1 \u0441\u043e\u043e\u0431\u0449./\u0441\u0435\u043a\ndp.include_middleware(ErrorHandlingMiddleware())\n</code></pre>"},{"location":"api/#middleware_1","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 Middleware","text":""},{"location":"api/#loggingmiddleware","title":"LoggingMiddleware","text":"<p>\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445. <pre><code>dp.include_middleware(LoggingMiddleware(log_level=\"INFO\"))\n</code></pre></p>"},{"location":"api/#errorhandlingmiddleware","title":"ErrorHandlingMiddleware","text":"<p>\u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445, \u0447\u0442\u043e\u0431\u044b \u0431\u043e\u0442 \u043d\u0435 \u043f\u0430\u0434\u0430\u043b. <pre><code>async def error_handler(ctx: Context, error: Exception):\n    logger.error(f\"Error in handler: {error}\")\n    await ctx.reply(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u043d\u043e \u044f \u0443\u0436\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u043b \u043e \u043d\u0435\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c.\")\n\ndp.include_middleware(ErrorHandlingMiddleware(error_handler=error_handler))\n</code></pre></p>"},{"location":"api/#throttlingmiddleware","title":"ThrottlingMiddleware","text":"<p>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. <pre><code>dp.include_middleware(ThrottlingMiddleware(rate_limit=1.0))  # 1 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443\n</code></pre></p>"},{"location":"api/#usertrackingmiddleware","title":"UserTrackingMiddleware","text":"<p>\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. <pre><code>user_tracker = UserTrackingMiddleware()\ndp.include_middleware(user_tracker)\n\n# \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\nactive_count = user_tracker.get_active_users_count()\n</code></pre></p>"},{"location":"api/#metricsmiddleware","title":"MetricsMiddleware","text":"<p>\u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 (\u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b, \u043a\u043e\u043b-\u0432\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439/\u043e\u0448\u0438\u0431\u043e\u043a). <pre><code>metrics = MetricsMiddleware()\ndp.include_middleware(metrics)\n\n# \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nstats = metrics.get_metrics()\nprint(f\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: {stats['messages_processed']}\")\n</code></pre></p>"},{"location":"api/#antispammiddleware","title":"AntispamMiddleware","text":"<p>\u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a. <pre><code>dp.include_middleware(AntispamMiddleware(interval=2.0))\n</code></pre></p>"},{"location":"api/#profilingmiddleware","title":"ProfilingMiddleware","text":"<p>\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438. <pre><code>profiler = ProfilingMiddleware()\ndp.include_middleware(profiler)\n\n# \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\navg_time = profiler.get_avg_time()\n</code></pre></p>"},{"location":"api/#middleware_2","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e Middleware","text":"<pre><code>from maxbot.middleware import BaseMiddleware\n\nclass CustomMiddleware(BaseMiddleware):\n    async def __call__(self, handler, ctx):\n        # \u041b\u043e\u0433\u0438\u043a\u0430 \u0434\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n        print(f\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {ctx.user_id}\")\n\n        result = await handler(ctx)\n\n        # \u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n        print(f\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e\")\n\n        return result\n\ndp.include_middleware(CustomMiddleware())\n</code></pre>"},{"location":"api/#8","title":"8. \u0424\u0438\u043b\u044c\u0442\u0440\u044b","text":"<p>\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0440\u0435\u0448\u0430\u044e\u0442, \u0431\u0443\u0434\u0435\u0442 \u043b\u0438 \u0432\u044b\u0437\u0432\u0430\u043d \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c.</p>"},{"location":"api/#_34","title":"\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b","text":"<pre><code>from maxbot.filters import command, text, regex, attachment_type, has_attachment\n\n@dp.message_handler(command(\"start\"))\nasync def start_handler(ctx: Context): ...\n\n@dp.message_handler(text(\"\u043f\u0440\u0438\u0432\u0435\u0442\", exact=False))\nasync def hello_handler(ctx: Context): ...\n\n@dp.message_handler(regex(r\"^\\d+$\"))\nasync def number_handler(ctx: Context): ...\n\n@dp.message_handler(attachment_type(\"image\"))\nasync def image_handler(ctx: Context): ...\n\n@dp.message_handler(has_attachment(True))\nasync def attachment_handler(ctx: Context): ...\n</code></pre>"},{"location":"api/#_35","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b","text":"<ul> <li><code>user_filter(user_ids)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442, \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>time_filter(start_hour, end_hour)</code>: \u0421\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438</li> <li><code>custom_filter(func)</code>: \u0412\u0430\u0448 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>lambda ctx: ...</code></li> </ul>"},{"location":"api/#_36","title":"\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432","text":"<pre><code>from maxbot.filters import and_filter, or_filter, not_filter\n\n@dp.message_handler(and_filter(command(\"admin\"), user_filter([123, 456])))\n@dp.message_handler(or_filter(command(\"start\"), text(\"\u043f\u043e\u043c\u043e\u0449\u044c\")))\n@dp.message_handler(not_filter(text(\"\u0441\u043f\u0430\u043c\")))\n</code></pre>"},{"location":"api/#9-router-14","title":"9. Router \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (\u0432\u0435\u0440\u0441\u0438\u044f 1.4+)","text":"<p>Router \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u0443\u044e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0438 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</p>"},{"location":"api/#_37","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u0430","text":"<pre><code>from maxbot import Router\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\ncommands_router = Router()\n\n@commands_router.message_handler(F.command == \"start\")\nasync def start_command(ctx: Context):\n    await ctx.reply(\"\u041f\u0440\u0438\u0432\u0435\u0442! \u042d\u0442\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430 start\")\n\n@commands_router.message_handler(F.command == \"help\")\nasync def help_command(ctx: Context):\n    await ctx.reply(\"\u042d\u0442\u043e \u0441\u043f\u0440\u0430\u0432\u043a\u0430\")\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0434\u043b\u044f callback\ncallback_router = Router()\n\n@callback_router.callback_query_handler(F.payload == \"action\")\nasync def handle_action(ctx: Context):\n    await ctx.answer_callback(\"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e!\")\n</code></pre>"},{"location":"api/#_38","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u043a \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440\u0443","text":"<pre><code>dp.include_router(commands_router)\ndp.include_router(callback_router)\n</code></pre>"},{"location":"api/#_39","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c\u0438","text":"<pre><code>my_bot/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 routers/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 commands.py\n\u2502   \u251c\u2500\u2500 callbacks.py\n\u2502   \u2514\u2500\u2500 events.py\n\u2514\u2500\u2500 handlers/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 common.py\n</code></pre>"},{"location":"api/#10","title":"10. \u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>SDK \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Pydantic \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438\u0437 <code>maxbot</code>.</p>"},{"location":"api/#_40","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","text":""},{"location":"api/#user","title":"User","text":"<pre><code>class User(BaseModel):\n    user_id: int\n    name: str = \"\"\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    is_bot: bool = False\n    last_activity_time: Optional[int] = 0\n</code></pre>"},{"location":"api/#chat","title":"Chat","text":"<pre><code>class Chat(BaseModel):\n    chat_id: int\n    chat_type: str  # \"private\" \u0438\u043b\u0438 \"group\"\n    user_id: Optional[int] = None\n</code></pre>"},{"location":"api/#message","title":"Message","text":"<pre><code>class Message(BaseModel):\n    recipient: Chat\n    sender: User\n    timestamp: int\n    body: MessageBody\n</code></pre>"},{"location":"api/#messagebody","title":"MessageBody","text":"<pre><code>class MessageBody(BaseModel):\n    mid: str\n    seq: int\n    text: Optional[str] = None\n    attachments: Optional[List[BaseAttachment]] = None\n</code></pre>"},{"location":"api/#baseattachment","title":"BaseAttachment","text":"<pre><code>class BaseAttachment(BaseModel):\n    type: str\n    payload: Optional[AttachmentPayload] = None\n    url: Optional[str] = None\n    file_id: Optional[str] = None\n    filename: Optional[str] = None\n    size: Optional[int] = None\n    mime_type: Optional[str] = None\n    width: Optional[int] = None\n    height: Optional[int] = None\n    duration: Optional[int] = None\n    performer: Optional[str] = None\n    title: Optional[str] = None\n    thumbnail: Optional[AttachmentThumbnail] = None\n    latitude: Optional[float] = None\n    longitude: Optional[float] = None\n    emoji: Optional[str] = None\n</code></pre>"},{"location":"api/#_41","title":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b","text":""},{"location":"api/#inlinekeyboardbutton","title":"InlineKeyboardButton","text":"<pre><code>class InlineKeyboardButton(BaseModel):\n    type: str = 'callback'\n    text: str\n    payload: Optional[str] = None\n    url: Optional[str] = None\n</code></pre>"},{"location":"api/#inlinekeyboardmarkup","title":"InlineKeyboardMarkup","text":"<pre><code>class InlineKeyboardMarkup(BaseModel):\n    inline_keyboard: List[List[InlineKeyboardButton]]\n</code></pre>"},{"location":"api/#callback_4","title":"Callback","text":""},{"location":"api/#callbackquery","title":"CallbackQuery","text":"<pre><code>class CallbackQuery(BaseModel):\n    callback_id: str\n    user: User\n    payload: Optional[str] = None\n    message: Optional[Message] = None\n</code></pre>"},{"location":"api/#14_2","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u0432\u0435\u0440\u0441\u0438\u044f 1.4+)","text":""},{"location":"api/#botstarted","title":"BotStarted","text":"<pre><code>class BotStarted(BaseModel):\n    chat_id: int\n    user: User\n</code></pre>"},{"location":"api/#useradded","title":"UserAdded","text":"<pre><code>class UserAdded(BaseModel):\n    chat_id: int\n    user: User\n    inviter: User\n</code></pre>"},{"location":"api/#chatmemberupdated","title":"ChatMemberUpdated","text":"<pre><code>class ChatMemberUpdated(BaseModel):\n    chat_id: int\n    user: User\n    old_status: str\n    new_status: str\n</code></pre>"},{"location":"api/#11","title":"11. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":""},{"location":"api/#_42","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<pre><code>from maxbot.middleware import ErrorHandlingMiddleware\n\ndp.include_middleware(ErrorHandlingMiddleware())\n</code></pre>"},{"location":"api/#_43","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<pre><code>async def error_handler(ctx: Context, error: Exception):\n    logger.error(f\"Error in handler: {error}\")\n    await ctx.reply(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u043d\u043e \u044f \u0443\u0436\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u043b \u043e \u043d\u0435\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c.\")\n\ndp.include_middleware(ErrorHandlingMiddleware(error_handler=error_handler))\n</code></pre>"},{"location":"api/#try-catch","title":"Try-catch \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445","text":"<pre><code>@dp.message_handler(F.command == \"risky\")\nasync def risky_handler(ctx: Context):\n    try:\n        # \u0420\u0438\u0441\u043a\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\n        result = await some_risky_operation()\n        await ctx.reply(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {result}\")\n    except ValueError as e:\n        await ctx.reply(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438: {e}\")\n    except Exception as e:\n        logger.error(f\"\u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430: {e}\")\n        await ctx.reply(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\")\n</code></pre>"},{"location":"api/#12","title":"12. \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>SDK \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 loguru \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> <pre><code>from loguru import logger\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\nlogger.add(\"bot.log\", rotation=\"1 day\", retention=\"7 days\")\n\n# \u0412 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445\n@dp.message_handler(F.command == \"debug\")\nasync def debug_handler(ctx: Context):\n    logger.info(f\"User {ctx.user_id} sent command: {ctx.text}\")\n    logger.debug(f\"Full context: {ctx}\")\n</code></pre>"},{"location":"api/#13","title":"13. \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":""},{"location":"api/#_44","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<pre><code>my_bot/\n\u251c\u2500\u2500 main.py          # \u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430\n\u251c\u2500\u2500 routers/         # \u0420\u043e\u0443\u0442\u0435\u0440\u044b (\u0432\u0435\u0440\u0441\u0438\u044f 1.4+)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 commands.py\n\u2502   \u251c\u2500\u2500 callbacks.py\n\u2502   \u2514\u2500\u2500 events.py\n\u251c\u2500\u2500 handlers/        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 common.py\n\u2502   \u2514\u2500\u2500 utils.py\n\u251c\u2500\u2500 middleware/      # Middleware\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 custom.py\n\u251c\u2500\u2500 utils/           # \u0423\u0442\u0438\u043b\u0438\u0442\u044b\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 helpers.py\n\u2514\u2500\u2500 config.py        # \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\n</code></pre>"},{"location":"api/#_45","title":"\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0441 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c\u0438","text":"<pre><code># routers/commands.py\nfrom maxbot import Router, F, Context\n\ndef create_commands_router():\n    router = Router()\n\n    @router.message_handler(F.command == \"start\")\n    async def start_handler(ctx: Context):\n        await ctx.reply(\"\u041f\u0440\u0438\u0432\u0435\u0442! \u042d\u0442\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430 start\")\n\n    @router.message_handler(F.command == \"help\")\n    async def help_handler(ctx: Context):\n        await ctx.reply(\"\u042d\u0442\u043e \u0441\u043f\u0440\u0430\u0432\u043a\u0430\")\n\n    return router\n\n# main.py\nfrom routers.commands import create_commands_router\n\ndp = Dispatcher(bot)\ncommands_router = create_commands_router()\ndp.include_router(commands_router)\n</code></pre>"},{"location":"api/#_46","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c","text":"<pre><code># \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\nuser_states = {}\n\n@dp.message_handler(F.command == \"game\")\nasync def start_game(ctx: Context):\n    user_states[ctx.user_id] = {\"game\": \"started\", \"score\": 0}\n    await ctx.reply(\"\u0418\u0433\u0440\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c!\")\n\n@dp.message_handler(lambda ctx: user_states.get(ctx.user_id, {}).get(\"game\") == \"started\")\nasync def game_handler(ctx: Context):\n    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0433\u0440\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    pass\n</code></pre>"},{"location":"api/#_47","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439","text":"<pre><code>@dp.bot_started_handler()\nasync def on_bot_started(ctx: Context):\n    await ctx.reply(f\"\u0411\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c {ctx.user.name}\")\n\n@dp.user_added_handler()\nasync def on_user_added(ctx: Context):\n    await ctx.reply(f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {ctx.user.name} \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 \u0447\u0430\u0442\")\n\n@dp.chat_member_updated_handler()\nasync def on_member_updated(ctx: Context):\n    await ctx.reply(f\"\u0421\u0442\u0430\u0442\u0443\u0441 {ctx.user.name} \u0438\u0437\u043c\u0435\u043d\u0435\u043d: {ctx.old_status} -&gt; {ctx.new_status}\")\n</code></pre>"},{"location":"examples/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f AsyncMaxBot SDK","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0431\u043e\u0442\u043e\u0432, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 AsyncMaxBot SDK \u0432\u0435\u0440\u0441\u0438\u0438 1.4.1. \u0412\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p>"},{"location":"examples/#1-","title":"1. \u042d\u0445\u043e-\u0431\u043e\u0442 (\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440)","text":"<p>\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p> <pre><code>\"\"\"\n\u042d\u0445\u043e-\u0431\u043e\u0442 - \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\n\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 AsyncMaxBot SDK 1.4.0\n\"\"\"\n\nimport asyncio\nimport os\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.filters import command, text\nfrom maxbot.middleware import LoggingMiddleware, ErrorHandlingMiddleware\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\ndef get_token():\n    token_file = \"token.txt\"\n    if os.path.exists(token_file):\n        with open(token_file, 'r') as f:\n            return f.read().strip()\n    return os.environ.get(\"MAXBOT_TOKEN\", \"YOUR_TOKEN_HERE\")\n\nTOKEN = get_token()\n\nclass EchoBot:\n    \"\"\"\u042d\u0445\u043e-\u0431\u043e\u0442 \u0441 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439\"\"\"\n\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.stats = {\"messages\": 0, \"users\": set()}\n\n    def setup_middleware(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e middleware\"\"\"\n        self.dp.include_middleware(LoggingMiddleware())\n        self.dp.include_middleware(ErrorHandlingMiddleware())\n\n    def setup_handlers(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\"\"\"\n\n        @self.dp.message_handler(F.command == \"start\")\n        async def start_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u044d\u0445\u043e-\u0431\u043e\u0442.\\n\"\n                \"\ud83d\udcdd \u041f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c, \u0438 \u044f \u043f\u043e\u0432\u0442\u043e\u0440\u044e \u044d\u0442\u043e.\\n\"\n                \"\ud83d\udcca /stats \u2014 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\\n\"\n                \"\ud83d\udd04 /echo \u2014 \u0440\u0435\u0436\u0438\u043c \u044d\u0445\u043e\\n\"\n                \"\u2753 /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(F.command == \"help\")\n        async def help_handler(ctx: Context):\n            await ctx.reply(\n                \"\ud83d\udcda \u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u044d\u0445\u043e-\u0431\u043e\u0442\u0443:\\n\\n\"\n                \"\ud83d\udcac \u041f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u044f \u0435\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044e\\n\"\n                \"\ud83d\udcca /stats \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\\n\"\n                \"\ud83d\udd04 /echo \u2014 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u044d\u0445\u043e\\n\"\n                \"\u2753 /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\"\n            )\n\n        @self.dp.message_handler(F.command == \"stats\")\n        async def stats_handler(ctx: Context):\n            self.stats[\"messages\"] += 1\n            self.stats[\"users\"].add(ctx.user_id)\n\n            await ctx.reply(\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\"\n                f\"\ud83d\udcac \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: {self.stats['messages']}\\n\"\n                f\"\ud83d\udc65 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: {len(self.stats['users'])}\"\n            )\n\n        @self.dp.message_handler(F.command == \"echo\")\n        async def echo_mode_handler(ctx: Context):\n            await ctx.reply(\"\ud83d\udd04 \u0420\u0435\u0436\u0438\u043c \u044d\u0445\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d! \u041d\u0430\u043f\u0438\u0448\u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c.\")\n\n        @self.dp.message_handler(F.text.contains(\"\u043f\u0440\u0438\u0432\u0435\u0442\"))\n        async def hello_handler(ctx: Context):\n            emoji = \"\ud83e\udd9c\" if \"\u043f\u0440\u0438\u0432\u0435\u0442\" in ctx.text.lower() else \"\ud83d\udce2\"\n            await ctx.reply(f\"{emoji} {ctx.text}\")\n\n        @self.dp.message_handler()\n        async def echo_handler(ctx: Context):\n            \"\"\"\n            \u042d\u0442\u043e\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043b\u043e\u0432\u0438\u0442 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0442\u0435\u043c \u0436\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u043c.\n            \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442:\n            - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0435\u0437 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 (\u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0432\u0441\u0435).\n            - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 `ctx.text` \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430.\n            - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 `ctx.reply` \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430.\n            \"\"\"\n            self.stats[\"messages\"] += 1\n            self.stats[\"users\"].add(ctx.user_id)\n\n            if ctx.text and ctx.text.startswith(\"/\"):\n                await ctx.reply(\"\u2753 \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u041d\u0430\u043f\u0438\u0448\u0438 /help\")\n            elif ctx.text:\n                emoji = \"\ud83e\udd9c\" if \"\u043f\u0440\u0438\u0432\u0435\u0442\" in ctx.text.lower() else \"\ud83d\udce2\"\n                await ctx.reply(f\"{emoji} {ctx.text}\")\n\n    async def run(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430\"\"\"\n        print(\"\ud83e\udd16 \u042d\u0445\u043e-\u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n\n        async with self.bot:\n            me = await self.bot.get_me()\n            print(f\"\ud83e\udd16 \u0411\u043e\u0442: {me['name']} (ID: {me['user_id']})\")\n\n            await self.bot.polling(dispatcher=self.dp)\n\nasync def main():\n    \"\"\"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430.\"\"\"\n    bot = EchoBot()\n    try:\n        await bot.run()\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\uded1 \u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u0427\u0442\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442: - \u0411\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0431\u043e\u0442\u0430 \u0441 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434 (<code>F.command</code>) - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \"catch-all\" \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 middleware \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a - \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c (\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430)</p>"},{"location":"examples/#2-inline","title":"2. \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0441 Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 \ud83c\udfb0","text":"<p>\u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0433\u0440\u044b \u0432 \u0431\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440, callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u044b.</p> <pre><code>\"\"\"\n\u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0441 Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 - \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\n\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0443\n\"\"\"\n\nimport asyncio\nfrom maxbot import Bot, Dispatcher, Context, F\nfrom maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\nimport random\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\n# \u041a\u0430\u0440\u0442\u044b \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nSUITS = [\"\u2660\", \"\u2665\", \"\u2666\", \"\u2663\"]\nRANKS = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"]\nVALUES = {\"A\": 11, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 10, \"Q\": 10, \"K\": 10}\n\n# \u0418\u0433\u0440\u043e\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\nGAMES = {}\n\nclass GameState:\n    def __init__(self):\n        self.deck = self._create_deck()\n        self.player = []\n        self.dealer = []\n        self.finished = False\n        self.result = \"\"\n\n    def _create_deck(self):\n        deck = []\n        for suit in SUITS:\n            for rank in RANKS:\n                deck.append(f\"{rank}{suit}\")\n        random.shuffle(deck)\n        return deck\n\n    def deal_initial(self):\n        self.player = [self.deck.pop(), self.deck.pop()]\n        self.dealer = [self.deck.pop(), self.deck.pop()]\n\n    def hit(self):\n        if not self.finished:\n            self.player.append(self.deck.pop())\n            if self.get_hand_value(self.player) &gt; 21:\n                self.finished = True\n                self.result = \"\ud83d\udca5 \u041f\u0435\u0440\u0435\u0431\u043e\u0440! \u0412\u044b \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b\u0438!\"\n\n    def stand(self):\n        if not self.finished:\n            self.finished = True\n            while self.get_hand_value(self.dealer) &lt; 17:\n                self.dealer.append(self.deck.pop())\n\n            player_value = self.get_hand_value(self.player)\n            dealer_value = self.get_hand_value(self.dealer)\n\n            if dealer_value &gt; 21:\n                self.result = \"\ud83c\udf89 \u0414\u0438\u043b\u0435\u0440 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u043b! \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &gt; dealer_value:\n                self.result = \"\ud83c\udf89 \u0412\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b\u0438!\"\n            elif player_value &lt; dealer_value:\n                self.result = \"\ud83d\ude14 \u0414\u0438\u043b\u0435\u0440 \u0432\u044b\u0438\u0433\u0440\u0430\u043b!\"\n            else:\n                self.result = \"\ud83e\udd1d \u041d\u0438\u0447\u044c\u044f!\"\n\n    def surrender(self):\n        if not self.finished:\n            self.finished = True\n            self.result = \"\ud83c\udff3\ufe0f \u0412\u044b \u0441\u0434\u0430\u043b\u0438\u0441\u044c!\"\n\n    def get_hand_value(self, hand):\n        value = 0\n        aces = 0\n\n        for card in hand:\n            rank = card[:-1]  # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u0441\u0442\u044c\n            card_value = VALUES[rank]\n            if card_value == 11:\n                aces += 1\n            else:\n                value += card_value\n\n        for _ in range(aces):\n            if value + 11 &lt;= 21:\n                value += 11\n            else:\n                value += 1\n\n        return value\n\n    def get_display_text(self):\n        player_value = self.get_hand_value(self.player)\n        dealer_value = self.get_hand_value(self.dealer)\n\n        text = f\"\ud83c\udfb2 **\u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a**\\n\\n\"\n        text += f\"\ud83d\udc64 **\u0412\u0430\u0448\u0438 \u043a\u0430\u0440\u0442\u044b:** {' '.join(self.player)} = {player_value}\\n\"\n\n        if self.finished:\n            text += f\"\ud83e\udd16 **\u041a\u0430\u0440\u0442\u044b \u0434\u0438\u043b\u0435\u0440\u0430:** {' '.join(self.dealer)} = {dealer_value}\\n\\n\"\n            text += f\"**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:** {self.result}\"\n        else:\n            text += f\"\ud83e\udd16 **\u041a\u0430\u0440\u0442\u0430 \u0434\u0438\u043b\u0435\u0440\u0430:** {self.dealer[0]} ?\\n\\n\"\n            text += \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\"\n\n        return text\n\ndef get_keyboard(finished=False):\n    if finished:\n        return InlineKeyboardMarkup(\n            inline_keyboard=[[InlineKeyboardButton(text=\"\ud83d\udd04 \u0421\u044b\u0433\u0440\u0430\u0442\u044c \u0435\u0449\u0451\", payload=\"restart\")]]\n        )\n    return InlineKeyboardMarkup(\n        inline_keyboard=[\n            [\n                InlineKeyboardButton(text=\"\ud83c\udccf \u0412\u0437\u044f\u0442\u044c\", payload=\"hit\"),\n                InlineKeyboardButton(text=\"\u270b \u0421\u0442\u043e\u043f\", payload=\"stand\"),\n                InlineKeyboardButton(text=\"\ud83c\udff3\ufe0f \u0421\u0434\u0430\u0442\u044c\u0441\u044f\", payload=\"surrender\"),\n            ]\n        ]\n    )\n\nasync def main():\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        @dp.message_handler(F.command == \"start\")\n        async def start(ctx: Context):\n            GAMES[ctx.user_id] = GameState()\n            game = GAMES[ctx.user_id]\n            game.deal_initial()\n\n            await ctx.reply(\n                game.get_display_text(),\n                reply_markup=get_keyboard()\n            )\n\n        @dp.callback_query_handler(F.payload == \"hit\")\n        async def hit_handler(ctx: Context):\n            if ctx.user_id not in GAMES:\n                await ctx.answer_callback(\"\u274c \u0418\u0433\u0440\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0438\u0433\u0440\u0443!\")\n                return\n\n            game = GAMES[ctx.user_id]\n            game.hit()\n\n            await ctx.answer_callback(\"\ud83c\udccf \u041a\u0430\u0440\u0442\u0430 \u0432\u0437\u044f\u0442\u0430!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard(game.finished)\n            )\n\n        @dp.callback_query_handler(F.payload == \"stand\")\n        async def stand_handler(ctx: Context):\n            if ctx.user_id not in GAMES:\n                await ctx.answer_callback(\"\u274c \u0418\u0433\u0440\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0438\u0433\u0440\u0443!\")\n                return\n\n            game = GAMES[ctx.user_id]\n            game.stand()\n\n            await ctx.answer_callback(\"\u270b \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438\u0441\u044c!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard(game.finished)\n            )\n\n        @dp.callback_query_handler(F.payload == \"surrender\")\n        async def surrender_handler(ctx: Context):\n            if ctx.user_id not in GAMES:\n                await ctx.answer_callback(\"\u274c \u0418\u0433\u0440\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430. \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0438\u0433\u0440\u0443!\")\n                return\n\n            game = GAMES[ctx.user_id]\n            game.surrender()\n\n            await ctx.answer_callback(\"\ud83c\udff3\ufe0f \u0421\u0434\u0430\u043b\u0438\u0441\u044c!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard(game.finished)\n            )\n\n        @dp.callback_query_handler(F.payload == \"restart\")\n        async def restart_handler(ctx: Context):\n            GAMES[ctx.user_id] = GameState()\n            game = GAMES[ctx.user_id]\n            game.deal_initial()\n\n            await ctx.answer_callback(\"\ud83d\udd04 \u041d\u043e\u0432\u0430\u044f \u0438\u0433\u0440\u0430!\")\n            await ctx.edit_message(\n                game.get_display_text(),\n                reply_markup=get_keyboard()\n            )\n\n        print(\"\ud83c\udfb0 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u0427\u0442\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442: - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0441 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438 - \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 callback-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 - MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0443 (<code>F.command</code>, <code>F.payload</code>) - \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0438\u0433\u0440\u044b - \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0443\u044e \u0438\u0433\u0440\u043e\u0432\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443</p>"},{"location":"examples/#3-router","title":"3. Router \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (\u041c\u043e\u0434\u0443\u043b\u044c\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430)","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Router \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b.</p> <pre><code>\"\"\"\nRouter \u0441\u0438\u0441\u0442\u0435\u043c\u0430 - \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\n\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 \u043b\u043e\u0433\u0438\u043a\u0438\n\"\"\"\n\nimport asyncio\nfrom maxbot import Bot, Dispatcher, Router, F, Context\nfrom maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton\n\nTOKEN = \"YOUR_TOKEN_HERE\"\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\ndef create_commands_router():\n    router = Router()\n\n    @router.message_handler(F.command == \"start\")\n    async def start_command(ctx: Context):\n        keyboard = InlineKeyboardMarkup(\n            inline_keyboard=[\n                [InlineKeyboardButton(text=\"\ud83c\udfae \u0418\u0433\u0440\u044b\", payload=\"games\")],\n                [InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"stats\")],\n                [InlineKeyboardButton(text=\"\u2139\ufe0f \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")]\n            ]\n        )\n        await ctx.reply(\n            f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0439 \u0431\u043e\u0442.\\n\"\n            \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0430\u0437\u0434\u0435\u043b:\",\n            reply_markup=keyboard\n        )\n\n    @router.message_handler(F.command == \"help\")\n    async def help_command(ctx: Context):\n        await ctx.reply(\n            \"\ud83d\udcda \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\\n\\n\"\n            \"\ud83c\udfae /games \u2014 \u0438\u0433\u0440\u044b\\n\"\n            \"\ud83d\udcca /stats \u2014 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\\n\"\n            \"\u2139\ufe0f /help \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\\n\"\n            \"\ud83d\udd27 /settings \u2014 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\"\n        )\n\n    @router.message_handler(F.command == \"settings\")\n    async def settings_command(ctx: Context):\n        keyboard = InlineKeyboardMarkup(\n            inline_keyboard=[\n                [InlineKeyboardButton(text=\"\ud83d\udd14 \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f\", payload=\"notifications\")],\n                [InlineKeyboardButton(text=\"\ud83c\udf0d \u042f\u0437\u044b\u043a\", payload=\"language\")],\n                [InlineKeyboardButton(text=\"\ud83d\udd19 \u041d\u0430\u0437\u0430\u0434\", payload=\"back_to_main\")]\n            ]\n        )\n        await ctx.reply(\"\u2699\ufe0f \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438:\", reply_markup=keyboard)\n\n    return router\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0434\u043b\u044f callback\ndef create_callback_router():\n    router = Router()\n\n    @router.callback_query_handler(F.payload == \"games\")\n    async def games_callback(ctx: Context):\n        keyboard = InlineKeyboardMarkup(\n            inline_keyboard=[\n                [InlineKeyboardButton(text=\"\ud83c\udfb0 \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a\", payload=\"blackjack\")],\n                [InlineKeyboardButton(text=\"\ud83c\udfb2 \u041a\u043e\u0441\u0442\u0438\", payload=\"dice\")],\n                [InlineKeyboardButton(text=\"\ud83d\udd19 \u041d\u0430\u0437\u0430\u0434\", payload=\"back_to_main\")]\n            ]\n        )\n        await ctx.answer_callback(\"\ud83c\udfae \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0438\u0433\u0440\u0443:\")\n        await ctx.edit_message(\"\ud83c\udfae \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0438\u0433\u0440\u044b:\", reply_markup=keyboard)\n\n    @router.callback_query_handler(F.payload == \"stats\")\n    async def stats_callback(ctx: Context):\n        await ctx.answer_callback(\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f...\")\n        await ctx.edit_message(\n            \"\ud83d\udcca \u0412\u0430\u0448\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\"\n            \"\ud83c\udfae \u0418\u0433\u0440 \u0441\u044b\u0433\u0440\u0430\u043d\u043e: 15\\n\"\n            \"\ud83c\udfc6 \u041f\u043e\u0431\u0435\u0434: 8\\n\"\n            \"\ud83d\udcdd \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: 127\"\n        )\n\n    @router.callback_query_handler(F.payload == \"help\")\n    async def help_callback(ctx: Context):\n        await ctx.answer_callback(\"\u2139\ufe0f \u0421\u043f\u0440\u0430\u0432\u043a\u0430\")\n        await ctx.edit_message(\n            \"\u2139\ufe0f \u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u0431\u043e\u0442\u0443:\\n\\n\"\n            \"\ud83c\udfae \u0418\u0433\u0440\u044b \u2014 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0438\u043d\u0438-\u0438\u0433\u0440\u044b\\n\"\n            \"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u2014 \u0432\u0430\u0448\u0438 \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f\\n\"\n            \"\u2699\ufe0f \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u2014 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\"\n        )\n\n    @router.callback_query_handler(F.payload == \"back_to_main\")\n    async def back_to_main_callback(ctx: Context):\n        keyboard = InlineKeyboardMarkup(\n            inline_keyboard=[\n                [InlineKeyboardButton(text=\"\ud83c\udfae \u0418\u0433\u0440\u044b\", payload=\"games\")],\n                [InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"stats\")],\n                [InlineKeyboardButton(text=\"\u2139\ufe0f \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")]\n            ]\n        )\n        await ctx.answer_callback(\"\ud83d\udd19 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\")\n        await ctx.edit_message(\n            f\"\ud83d\udc4b \u041f\u0440\u0438\u0432\u0435\u0442, {ctx.user.name}! \u042f \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0439 \u0431\u043e\u0442.\\n\"\n            \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0430\u0437\u0434\u0435\u043b:\",\n            reply_markup=keyboard\n        )\n\n    return router\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439\ndef create_events_router():\n    router = Router()\n\n    @router.bot_started_handler()\n    async def on_bot_started(ctx: Context):\n        await ctx.reply(\n            f\"\ud83c\udf89 \u0411\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c {ctx.user.name}!\\n\"\n            \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 /start \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b.\"\n        )\n\n    @router.user_added_handler()\n    async def on_user_added(ctx: Context):\n        await ctx.reply(\n            f\"\ud83d\udc4b \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c, {ctx.user.name}!\\n\"\n            \"\u042f \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0439 \u0431\u043e\u0442 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438.\\n\"\n            \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 /start \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b.\"\n        )\n\n    @router.chat_member_updated_handler()\n    async def on_member_updated(ctx: Context):\n        await ctx.reply(\n            f\"\ud83d\udc64 \u0421\u0442\u0430\u0442\u0443\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {ctx.user.name} \u0438\u0437\u043c\u0435\u043d\u0435\u043d:\\n\"\n            f\"\ud83d\udcca {ctx.old_status} \u2192 {ctx.new_status}\"\n        )\n\n    return router\n\nasync def main():\n    async with Bot(token=TOKEN) as bot:\n        dp = Dispatcher(bot)\n\n        # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440\u044b\n        commands_router = create_commands_router()\n        callback_router = create_callback_router()\n        events_router = create_events_router()\n\n        dp.include_router(commands_router)\n        dp.include_router(callback_router)\n        dp.include_router(events_router)\n\n        print(\"\ud83d\udd27 \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0439 \u0431\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n        await bot.polling(dispatcher=dp)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u0427\u0442\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442: - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 - \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044e \u043b\u043e\u0433\u0438\u043a\u0438 \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 - \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 (\u0432\u0435\u0440\u0441\u0438\u044f 1.4+) - \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u0443\u044e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044e \u043f\u043e \u043c\u0435\u043d\u044e \u0441 callback</p>"},{"location":"examples/#4-inline","title":"4. \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0441 Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 \ud83d\udc54","text":"<p>\u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 \u0431\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0441 inline-\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u044f\u0432\u043a\u0430\u043c\u0438, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u043e\u0439.</p> <pre><code>\"\"\"\n\u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c - \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430\n\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n\"\"\"\n\nimport asyncio\nimport os\nfrom datetime import datetime\nfrom maxbot import Bot\nfrom maxbot.dispatcher import Dispatcher\nfrom maxbot.filters import command, text, has_attachment, F\nfrom maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware\nfrom maxbot.max_types import Context, InlineKeyboardMarkup, InlineKeyboardButton\n\nTOKEN = \"YOUR_TOKEN_HERE\"  # \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u0432\u0430\u0448 \u0442\u043e\u043a\u0435\u043d\n\nclass SecretaryBot:\n    \"\"\"\u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0441 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439\"\"\"\n\n    def __init__(self):\n        self.bot = Bot(TOKEN)\n        self.dp = Dispatcher(self.bot)\n        self.setup_middleware()\n        self.setup_handlers()\n        self.applications = []\n        self.reminders = {}\n\n    def setup_middleware(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e middleware\"\"\"\n        manager = MiddlewareManager()\n        manager.add_middleware(LoggingMiddleware())\n        manager.add_middleware(ErrorHandlingMiddleware())\n        self.dp.middleware_manager = manager\n\n    def get_main_keyboard(self):\n        \"\"\"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\"\"\"\n        return InlineKeyboardMarkup(\n            inline_keyboard=[\n                [\n                    InlineKeyboardButton(text=\"\ud83d\udcdd \u041d\u043e\u0432\u0430\u044f \u0437\u0430\u044f\u0432\u043a\u0430\", payload=\"new_application\"),\n                    InlineKeyboardButton(text=\"\ud83d\udccb \u041c\u043e\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\", payload=\"list_applications\")\n                ],\n                [\n                    InlineKeyboardButton(text=\"\u23f0 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435\", payload=\"set_reminder\"),\n                    InlineKeyboardButton(text=\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\", payload=\"statistics\")\n                ],\n                [\n                    InlineKeyboardButton(text=\"\u2753 \u041f\u043e\u043c\u043e\u0449\u044c\", payload=\"help\")\n                ]\n            ]\n        )\n\n    def get_application_keyboard(self):\n        \"\"\"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u0437\u0430\u044f\u0432\u043e\u043a\"\"\"\n        return InlineKeyboardMarkup(\n            inline_keyboard=[\n                [\n                    InlineKeyboardButton(text=\"\ud83d\udcc4 \u041e\u0431\u0449\u0430\u044f\", payload=\"category_general\"),\n                    InlineKeyboardButton(text=\"\ud83d\udd27 \u0422\u0435\u0445\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430\", payload=\"category_support\")\n                ],\n                [\n                    InlineKeyboardButton(text=\"\ud83d\udcb0 \u0424\u0438\u043d\u0430\u043d\u0441\u044b\", payload=\"category_finance\"),\n                    InlineKeyboardButton(text=\"\ud83d\udcc8 \u041f\u0440\u043e\u0435\u043a\u0442\", payload=\"category_project\")\n                ],\n                [\n                    InlineKeyboardButton(text=\"\ud83d\udd19 \u041d\u0430\u0437\u0430\u0434\", payload=\"back_to_main\")\n                ]\n            ]\n        )\n\n    def setup_handlers(self):\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\"\"\"\n\n        @self.dp.message_handler(command(\"start\"))\n        async def start_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, {ctx.user.name}! \u042f \u0432\u0430\u0448 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c.\\n\\n\"\n                \"\ud83d\udccb \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.message_handler(text([\"\u043f\u0440\u0438\u0432\u0435\u0442\", \"\u0437\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\", \"\u0434\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c\", \"\u0434\u043e\u0431\u0440\u043e\u0435 \u0443\u0442\u0440\u043e\", \"\u0434\u043e\u0431\u0440\u044b\u0439 \u0432\u0435\u0447\u0435\u0440\"]))\n        async def greeting_handler(ctx: Context):\n            await ctx.reply(\n                f\"\ud83d\udc4b \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, {ctx.user.name}! \u042f \u0432\u0430\u0448 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c.\\n\\n\"\n                \"\ud83d\udccb \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.message_handler(text(\"\u043f\u043e\u043c\u043e\u0449\u044c\"))\n        async def help_handler(ctx: Context):\n            await ctx.reply(\n                \"\u2753 \u041f\u043e\u043c\u043e\u0449\u044c \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c:\\n\\n\"\n                \"\ud83d\udcdd \u0437\u0430\u044f\u0432\u043a\u0430: [\u0442\u0435\u043a\u0441\u0442] \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u044f\u0432\u043a\u0443\\n\"\n                \"\ud83d\udccb \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\\n\"\n                \"\u23f0 \u043d\u0430\u043f\u043e\u043c\u043d\u0438 \u2014 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435\\n\"\n                \"\ud83d\udcca \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\\n\"\n                \"\u2753 \u043f\u043e\u043c\u043e\u0449\u044c \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\\n\\n\"\n                \"\ud83d\udca1 \u041f\u0440\u0438\u043c\u0435\u0440: \u0437\u0430\u044f\u0432\u043a\u0430: \u041d\u0443\u0436\u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.message_handler(text(\"\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\"))\n        async def stats_handler(ctx: Context):\n            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]\n            total_apps = len(self.applications)\n\n            await ctx.reply(\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\\n\"\n                f\"\ud83d\udccb \u0412\u0441\u0435\u0433\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435: {total_apps}\\n\"\n                f\"\ud83d\udc64 \u0412\u0430\u0448\u0438\u0445 \u0437\u0430\u044f\u0432\u043e\u043a: {len(user_apps)}\\n\"\n                f\"\ud83d\udcdd \u041d\u043e\u0432\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a: {len([a for a in user_apps if a['status'] == '\ud83d\udcdd \u041d\u043e\u0432\u0430\u044f'])}\\n\"\n                f\"\u23f0 \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439: {len(self.reminders)}\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.message_handler(text(\"\u043d\u0430\u043f\u043e\u043c\u043d\u0438\"))\n        async def reminder_handler(ctx: Context):\n            self.reminders[ctx.user_id] = datetime.now()\n            await ctx.reply(\n                \"\u23f0 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\\n\"\n                \"\ud83d\udd14 \u042f \u043d\u0430\u043f\u043e\u043c\u043d\u044e \u0432\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 \u0447\u0430\u0441.\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.message_handler(text(\"\u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a\"))\n        async def list_applications_handler(ctx: Context):\n            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]\n\n            if user_apps:\n                apps_text = \"\ud83d\udccb \u0412\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438:\\n\\n\"\n                for app in user_apps[-5:]:  # \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5\n                    apps_text += f\"\ud83d\udd38 #{app['id']} ({app['date']})\\n\"\n                    apps_text += f\"   {app['status']} {app['category']}\\n\"\n                    apps_text += f\"   \ud83d\udcdd {app['text'][:50]}{'...' if len(app['text']) &gt; 50 else ''}\\n\\n\"\n                await ctx.reply(apps_text, reply_markup=self.get_main_keyboard())\n            else:\n                await ctx.reply(\"\ud83d\udced \u0423 \u0432\u0430\u0441 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u0437\u0430\u044f\u0432\u043e\u043a.\", reply_markup=self.get_main_keyboard())\n\n        @self.dp.message_handler(has_attachment(True))\n        async def attachment_handler(ctx: Context):\n            \"\"\"\n            \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n            \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 `has_attachment`.\n            \"\"\"\n            attachment_types = [att.type for att in ctx.attachments]\n            await ctx.reply(f\"\u0412\u0438\u0436\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f! \u0422\u0438\u043f\u044b: {', '.join(attachment_types)}. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u044e \u0432 \u0430\u0440\u0445\u0438\u0432.\", reply_markup=self.get_main_keyboard())\n            print(f\"User {ctx.user_id} sent attachments: {attachment_types}\")\n\n        @self.dp.message_handler()\n        async def no_attachment_handler(ctx: Context):\n            \"\"\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439.\"\"\"\n            await ctx.reply(\"\u042d\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u044f \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e.\", reply_markup=self.get_main_keyboard())\n\n        @self.dp.message_handler()\n        async def application_handler(ctx: Context):\n            if ctx.text.startswith(\"\u0437\u0430\u044f\u0432\u043a\u0430:\"):\n                application_text = ctx.text[7:].strip()\n                if application_text:\n                    app = {\n                        \"id\": len(self.applications) + 1,\n                        \"user_id\": ctx.user_id,\n                        \"user_name\": ctx.user.name,\n                        \"text\": application_text,\n                        \"status\": \"\ud83d\udcdd \u041d\u043e\u0432\u0430\u044f\",\n                        \"date\": datetime.now().strftime(\"%d.%m.%Y %H:%M\"),\n                        \"category\": \"\ud83d\udcc4 \u041e\u0431\u0449\u0430\u044f\"\n                    }\n                    self.applications.append(app)\n                    await ctx.reply(\n                        f\"\u2705 \u0417\u0430\u044f\u0432\u043a\u0430 #{app['id']} \u043f\u0440\u0438\u043d\u044f\u0442\u0430!\\n\"\n                        f\"\ud83d\udcdd \u0422\u0435\u043a\u0441\u0442: {application_text}\\n\"\n                        f\"\ud83d\udcc5 \u0414\u0430\u0442\u0430: {app['date']}\\n\"\n                        f\"\ud83d\udcca \u0412\u0441\u0435\u0433\u043e \u0437\u0430\u044f\u0432\u043e\u043a: {len(self.applications)}\",\n                        reply_markup=self.get_main_keyboard()\n                    )\n                else:\n                    await ctx.reply(\"\u274c \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u044f\u0432\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u044f.\", reply_markup=self.get_main_keyboard())\n            else:\n                await ctx.reply(\n                    \"\ud83e\udd14 \u041d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 '\u043f\u043e\u043c\u043e\u0449\u044c' \u0434\u043b\u044f \u0441\u043f\u0440\u0430\u0432\u043a\u0438.\",\n                    reply_markup=self.get_main_keyboard()\n                )\n\n        # Callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043a\u043d\u043e\u043f\u043e\u043a\n        @self.dp.callback_query_handler(F.payload == \"new_application\")\n        async def new_application_callback(ctx: Context):\n            await ctx.answer_callback(\"\ud83d\udcdd \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0437\u0430\u044f\u0432\u043a\u0438:\")\n            await ctx.edit_message(\n                \"\ud83d\udcdd \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u044f\u0432\u043a\u0438\\n\\n\"\n                \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e:\",\n                reply_markup=self.get_application_keyboard()\n            )\n\n        @self.dp.callback_query_handler(F.payload == \"list_applications\")\n        async def list_applications_callback(ctx: Context):\n            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]\n\n            if user_apps:\n                apps_text = \"\ud83d\udccb \u0412\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438:\\n\\n\"\n                for app in user_apps[-5:]:  # \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5\n                    apps_text += f\"\ud83d\udd38 #{app['id']} ({app['date']})\\n\"\n                    apps_text += f\"   {app['status']} {app['category']}\\n\"\n                    apps_text += f\"   \ud83d\udcdd {app['text'][:50]}{'...' if len(app['text']) &gt; 50 else ''}\\n\\n\"\n                await ctx.answer_callback(\"\ud83d\udccb \u0412\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438:\")\n                await ctx.edit_message(apps_text, reply_markup=self.get_main_keyboard())\n            else:\n                await ctx.answer_callback(\"\ud83d\udced \u0423 \u0432\u0430\u0441 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u0437\u0430\u044f\u0432\u043e\u043a\")\n                await ctx.edit_message(\"\ud83d\udced \u0423 \u0432\u0430\u0441 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442 \u0437\u0430\u044f\u0432\u043e\u043a.\", reply_markup=self.get_main_keyboard())\n\n        @self.dp.callback_query_handler(F.payload == \"set_reminder\")\n        async def set_reminder_callback(ctx: Context):\n            self.reminders[ctx.user_id] = datetime.now()\n            await ctx.answer_callback(\"\u23f0 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\")\n            await ctx.edit_message(\n                \"\u23f0 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\\n\"\n                \"\ud83d\udd14 \u042f \u043d\u0430\u043f\u043e\u043c\u043d\u044e \u0432\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 \u0447\u0430\u0441.\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.callback_query_handler(F.payload == \"statistics\")\n        async def statistics_callback(ctx: Context):\n            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]\n            total_apps = len(self.applications)\n\n            await ctx.answer_callback(\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430\")\n            await ctx.edit_message(\n                f\"\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n\\n\"\n                f\"\ud83d\udccb \u0412\u0441\u0435\u0433\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435: {total_apps}\\n\"\n                f\"\ud83d\udc64 \u0412\u0430\u0448\u0438\u0445 \u0437\u0430\u044f\u0432\u043e\u043a: {len(user_apps)}\\n\"\n                f\"\ud83d\udcdd \u041d\u043e\u0432\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a: {len([a for a in user_apps if a['status'] == '\ud83d\udcdd \u041d\u043e\u0432\u0430\u044f'])}\\n\"\n                f\"\u23f0 \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439: {len(self.reminders)}\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.callback_query_handler(F.payload == \"help\")\n        async def help_callback(ctx: Context):\n            await ctx.answer_callback(\"\u2753 \u0421\u043f\u0440\u0430\u0432\u043a\u0430\")\n            await ctx.edit_message(\n                \"\u2753 \u041f\u043e\u043c\u043e\u0449\u044c \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c:\\n\\n\"\n                \"\ud83d\udcdd \u0437\u0430\u044f\u0432\u043a\u0430: [\u0442\u0435\u043a\u0441\u0442] \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u044f\u0432\u043a\u0443\\n\"\n                \"\ud83d\udccb \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u044f\u0432\u043e\u043a \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\\n\"\n                \"\u23f0 \u043d\u0430\u043f\u043e\u043c\u043d\u0438 \u2014 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435\\n\"\n                \"\ud83d\udcca \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u2014 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\\n\"\n                \"\u2753 \u043f\u043e\u043c\u043e\u0449\u044c \u2014 \u044d\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\\n\\n\"\n                \"\ud83d\udca1 \u041f\u0440\u0438\u043c\u0435\u0440: \u0437\u0430\u044f\u0432\u043a\u0430: \u041d\u0443\u0436\u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        @self.dp.callback_query_handler(F.payload == \"back_to_main\")\n        async def back_to_main_callback(ctx: Context):\n            await ctx.answer_callback(\"\ud83d\udd19 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\")\n            await ctx.edit_message(\n                f\"\ud83d\udc4b \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, {ctx.user.name}! \u042f \u0432\u0430\u0448 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c.\\n\\n\"\n                \"\ud83d\udccb \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0437\u0430\u044f\u0432\u043e\u043a\n        @self.dp.callback_query_handler(F.payload.startswith(\"category_\"))\n        async def category_callback(ctx: Context):\n            category = ctx.payload.replace(\"category_\", \"\")\n            category_names = {\n                \"general\": \"\ud83d\udcc4 \u041e\u0431\u0449\u0430\u044f\",\n                \"support\": \"\ud83d\udd27 \u0422\u0435\u0445\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430\", \n                \"finance\": \"\ud83d\udcb0 \u0424\u0438\u043d\u0430\u043d\u0441\u044b\",\n                \"project\": \"\ud83d\udcc8 \u041f\u0440\u043e\u0435\u043a\u0442\"\n            }\n\n            await ctx.answer_callback(f\"\ud83d\udcdd \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f {category_names.get(category, '\u041e\u0431\u0449\u0430\u044f')} \u0432\u044b\u0431\u0440\u0430\u043d\u0430\")\n            await ctx.edit_message(\n                f\"\ud83d\udcdd \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438: {category_names.get(category, '\u041e\u0431\u0449\u0430\u044f')}\\n\\n\"\n                \"\ud83d\udcac \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u044f\u0432\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435:\\n\"\n                \"\u0437\u0430\u044f\u0432\u043a\u0430: [\u0432\u0430\u0448 \u0442\u0435\u043a\u0441\u0442]\",\n                reply_markup=self.get_main_keyboard()\n            )\n\n    async def check_reminders(self):\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439\"\"\"\n        current_time = datetime.now()\n        for user_id, reminder_time in list(self.reminders.items()):\n            if (current_time - reminder_time).seconds &gt; 3600:  # \u0427\u0435\u0440\u0435\u0437 \u0447\u0430\u0441\n                await self.bot.send_message(\n                    \"\ud83d\udd14 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435!\\n\"\n                    \"\ud83d\udccb \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u0430\u044f\u0432\u043a\u0438.\",\n                    user_id=user_id\n                )\n                del self.reminders[user_id]\n\n    async def run(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430\"\"\"\n        print(\"\ud83d\udc54 \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\")\n\n        async with self.bot:\n            me = await self.bot.get_me()\n            print(f\"\ud83e\udd16 \u0411\u043e\u0442: {me['name']} (ID: {me['user_id']})\")\n\n            # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0432 \u0444\u043e\u043d\u0435\n            asyncio.create_task(self.reminder_loop())\n\n            await self.bot.polling(\n                dispatcher=self.dp,\n                timeout=1,\n                long_polling_timeout=30\n            )\n\n    async def reminder_loop(self):\n        \"\"\"\u0426\u0438\u043a\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439\"\"\"\n        while True:\n            await self.check_reminders()\n            await asyncio.sleep(60)  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0438\u043d\u0443\u0442\u0443\n\nasync def main():\n    bot = SecretaryBot()\n    try:\n        await bot.run()\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\uded1 \u0411\u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u0427\u0442\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442: - \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 inline-\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0441 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0435\u0439 - \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 callback-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 F.payload - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0437\u0430\u044f\u0432\u043a\u0438, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f) - \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c has_attachment - \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 (\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439) - \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 - \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0437\u0430\u044f\u0432\u043e\u043a \u0447\u0435\u0440\u0435\u0437 callback - Middleware \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a</p>"},{"location":"examples/#_1","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442 \u0432\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 AsyncMaxBot SDK \u0432\u0435\u0440\u0441\u0438\u0438 1.4.1:</p> <ul> <li>\u2705 \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 Bot, Dispatcher, Context</li> <li>\u2705 MagicFilter \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0433\u0438\u0431\u043a\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 (F.command, F.payload, F.text)</li> <li>\u2705 Inline \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 callback \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0435\u0439</li> <li>\u2705 Router \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b</li> <li>\u2705 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c has_attachment</li> <li>\u2705 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u0432\u0435\u0440\u0441\u0438\u044f 1.4+)</li> <li>\u2705 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0437\u0430\u044f\u0432\u043a\u0438, \u0438\u0433\u0440\u044b, \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430)</li> <li>\u2705 \u0424\u043e\u043d\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f</li> <li>\u2705 \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438</li> <li>\u2705 Middleware \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a</li> <li>\u2705 \u041f\u043e\u043b\u043d\u0443\u044e \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e \u0441 Pydantic</li> </ul> <p>\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b: 1. \u042d\u0445\u043e-\u0431\u043e\u0442 \u2014 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 2. \u0411\u043b\u044d\u043a\u0434\u0436\u0435\u043a \u2014 \u0438\u0433\u0440\u044b \u0441 inline-\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\u0438 \u0438 callback 3. Router \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u2014 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f 4. \u0411\u043e\u0442-\u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u044c \u2014 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c</p> <p>\u0412\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e. \u041f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>YOUR_TOKEN_HERE</code> \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u043e\u0442\u0430 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0439\u0442\u0435! </p>"}]}